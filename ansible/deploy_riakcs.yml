# run with --tags=mount-ecryptfs to mount encrypted volume after reboot

- name: Common Setup
  hosts:
    - riakcs
    - stanchion
  sudo: yes
  roles:
    - {role: ecryptfs}

- name: First host in riakcs group -> riakcs_control_host
  # riakcs_control_host group must contain at most one host
  hosts:
    - riakcs
  tasks:
    - add_host: name="{{ riakcs_control }}" groups=riakcs_control_host
      when: riakcs_control_host is undefined
      check_mode: no
      tags: localsettings

- name: Register riak conf override fact
  # NOTE riak config files are only created/updated if they do not already exist
  # or if '-e force_riak_config=host1,host2,...' is specified on the command
  # line listing each node to force configure (use inventory_hostname as host
  # name). This is because it can be dangerous to change the riak.conf of a
  # running node. The Riak service may refuse to start or ignore some data if
  # the configuration is changed.
  hosts:
    - riakcs
  vars_files:
    - roles/riakcs/install/defaults/main.yml
    - roles/riakcs/configure/defaults/main.yml
  tasks:
    - name: "Stat {{ riak_conf }}"
      stat: path="{{ riak_conf }}"
      register: riak_conf_file
      changed_when: false
      failed_when: false
      check_mode: no
    - set_fact: _force_riak_config="{{ 'yes'
        if inventory_hostname in (force_riak_config | default('')).split(',')
            or force_riak_config | default('') == 'all'
            or not (riak_conf_file.stat.exists | default(True))
        else '' }}"
    # HACK set fact because defaults cannot be loaded from other hosts
    - set_fact: riak_nodename="{{ riak_nodename }}"

- name: Load admin keys from Riak CS conf
  sudo: True
  hosts: riakcs_control_host
  vars_files:
    - roles/riakcs/install/defaults/main.yml
  tasks:
    - include: roles/riakcs/get_admin_keys.yml tags=localsettings

- name: Install Riak and Riak CS
  sudo: True
  hosts: riakcs
  roles:
    - {role: riakcs/install, name: riak}
    - {role: riakcs/install, name: riakcs, service: riak-cs}

- name: Install Stanchion
  sudo: True
  hosts: stanchion
  roles:
    - {role: riakcs/install, name: stanchion}

- name: Configure and start Riak
  # Riak CS must be installed before Riak can be started
  sudo: True
  hosts: riakcs
  roles:
    - role: riakcs/configure
      name: riak
      drop_conf: advanced.config
      data_dirs:
        - "{{ riak_data_dir }}"
        - "{{ riak_ring_dir }}"
        - "{{ riak_data_root_leveldb }}"
      when: _force_riak_config | bool

- name: Join Riak [CS] nodes to cluster
  sudo: True
  hosts: riakcs
  tasks:
    - include: roles/riakcs/join_cluster.yml
      when: inventory_hostname != riakcs_control and _force_riak_config

- name: Configure and start Stanchion
  # Riak must be started before Stanchion can be started
  sudo: True
  hosts: stanchion
  roles:
    - role: riakcs/configure
      name: stanchion
      ulimit_n: 4096
      data_dirs: [ "{{ stanchion_data_dir }}" ]

- name: Configure and start Riak CS
  sudo: True
  hosts: riakcs
  roles:
    - {role: riakcs/configure, name: riakcs, service: riak-cs}

- name: Create admin user
  sudo: True
  hosts: riakcs_control_host
  roles:
    - role: riakcs/create_admin_user
      when: riak_key is undefined or riak_secret is undefined

- name: Sync admin user keys to Riak CS cluster
  sudo: True
  hosts: riakcs
  roles:
    - {role: riakcs/sync_keys, name: riakcs}

- name: Sync admin user keys to Stanchion
  sudo: True
  hosts:
    - stanchion
  roles:
    - {role: riakcs/sync_keys, name: stanchion}

- name: Remove Riak Restarter
  hosts: riakcs
  sudo: yes
  tasks:
    - name: Remove Riak restart script
      sudo: yes
      file: >
        path=/root/riak-restarter.sh
        state=absent
    - name: Remove Cron job
      sudo: yes
      cron:
        name: "Reboot Riak"
        cron_file: riak-restarter
        state: absent

- name: Riak CS logs
  hosts: riakcs
  sudo: yes
  tasks:
    - name: Purge old Riak CS access logs
      cron:
        name: "riak-cs-access-logs"
        user: root
        special_time: daily
        job: /usr/bin/find /var/log/riak-cs -name 'access.log.*' -mmin +90 -exec gzip -q {} \; &&
             /usr/bin/find /var/log/riak-cs -name 'access.log.*' -mtime +365 -delete
        cron_file: riak-cs-access-logs
        state: present
