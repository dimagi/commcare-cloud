---
# roles/postgresql/tasks/main.yml

- name: Add PosgreSQL apt repo
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_lsb.codename}}-pgdg main' state=present
  register: add_postgresql_repo
  tags:
    - pgbouncer

- name: Add PosgreSQL apt key
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present
  tags:
    - pgbouncer

- name: Update package list
  apt: update_cache=yes
  when: add_postgresql_repo|changed
  tags:
    - pgbouncer

- name: generate en_US.UTF-8 locale
  locale_gen: name='en_US.UTF-8' state=present

- name: Install PostgreSQL & dependencies
  apt: name="{{ item }}" state=present
  with_items:
    - "postgresql-{{ postgresql_version }}"
    - "postgresql-{{ postgresql_version }}-plproxy"
    - "postgresql-contrib-{{ postgresql_version }}"
    - "postgresql-server-dev-{{ postgresql_version }}"
    - python-docutils  # required for building pghashlib
    - libpq-dev
    - python-psycopg2
    - unzip

- name: Check for original postgresql directory
  stat: path="{{ postgresql_dir_original_path }}/{{ postgresql_version }}"
  register: orig_path

- name: Make new postgresql directory
  sudo: yes
  file:
    path: '{{ postgresql_dir_path }}'
    owner: postgres
    group: postgres
    mode: 0755
    state: directory

- name: Check for new postgresql directory
  stat: path="{{ postgresql_dir_path }}/{{ postgresql_version }}"
  register: new_path

- name: Assert postgresql directory shows up in exactly one place
  fail: msg="postgresl directory must either be {{ postgresql_dir_path }} or {{ postgresql_dir_original_path }} (and not both)"
  when: ((orig_path.stat.exists and new_path.stat.exists) or (not orig_path.stat.exists and not new_path.stat.exists))

- name: Move postgres to encrypted drive
  command: "mv {{ postgresql_dir_original_path }}/{{ postgresql_version }} {{ postgresql_dir_path }}/{{ postgresql_version }}"
  when: orig_path.stat.exists

- name: assert hot standby config correct
  assert: { that: "hot_standby_server is not defined or hot_standby_server in groups.pg_standby"}

- name: PostgreSQL app configuration
  template: src=postgresql.conf.j2 dest="{{ postgresql_config_home }}/postgresql.conf" owner="postgres"
  tags: postgresql_conf
  notify: Restart postgres

- name: PostgreSQL access configuration
  template: src=pg_hba.conf.j2 dest="{{ postgresql_config_home }}/pg_hba.conf" owner="postgres"
  notify: Reload postgres

- name: start postgresql
  become: true
  service: name=postgresql state=started

# Run initdb so that Postgres is ready to create users immediately
- name: Initialise PostgreSQL
  sudo_user: postgres
  command: "{{ postgres_install_dir }}/bin/initdb {{ postgresql_home }}"
  args:
    creates: "{{ postgresql_home }}/global/pg_filenode.map"

- name: Create PostgreSQL users
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_user:
    name: "{{ localsettings.PG_DATABASE_USER }}"
    password: "{{ localsettings.PG_DATABASE_PASSWORD }}"
    role_attr_flags: CREATEDB
    state: present
    port: "{{ postgresql_port }}"

- name: check postgres database hosts
  assert: { that: "item.host is not defined or item.host in groups.postgresql" }
  with_items: "{{ postgresql_dbs }}"

- name: Create PostgreSQL databases
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_db:
    name: "{{ item.name }}"
    state: present
    port: "{{ postgresql_port }}"
    owner: "{{ item.get('user', localsettings.PG_DATABASE_USER) }}"
    encoding: 'UTF-8'
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: 'template0'
  with_items: "{{ postgresql_dbs }}"
  when: (item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool

- name: Install pgbouncer
  apt: name=pgbouncer state=present
  notify: Start pgbouncer
  tags:
    - pgbouncer

- name: pgbouncer configuration
  template: src=pgbouncer.ini.j2 dest="{{ pgbouncer_ini }}"
  notify: Reload pgbouncer
  tags:
    - pgbouncer

- name: pgbouncer users
  template: src=pgbouncer.users.j2 dest="{{ pgbouncer_users }}"
  notify: Reload pgbouncer
  tags:
    - pgbouncer

- name: pgbouncer defaults
  template: src=pgbouncer.defaults.j2 dest=/etc/default/pgbouncer
  tags:
    - pgbouncer

- name: Download pghashlib
  get_url: url=https://github.com/markokr/pghashlib/archive/master.zip dest=/tmp/pghashlib.zip

- name: Unzip pghashlib
  command: unzip pghashlib.zip
  args:
     chdir: /tmp
     creates: /tmp/pghashlib-master

- name: Install pghashlib
  sudo: yes
  shell: "PG_CONFIG={{postgres_install_dir}}/bin/pg_config make install"
  args:
    chdir: /tmp/pghashlib-master
    creates: "{{postgres_install_dir}}/lib/hashlib.so"
  notify:
    - Run ldconfig
    - Restart postgres

- name: Create plproxy extension
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_ext:
    name: plproxy
    db: "{{item.name}}"
  when: (item.get('django_alias') == 'proxy' and item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"

- name: Create pghashlib extension
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_ext:
    name: hashlib
    db: "{{item.name}}"
  when: (item.get('django_alias') == 'proxy' and item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"

- name: Make plproxy a trusted language
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  postgresql_lang:
    lang: plproxy
    trust: True
    db: "{{item.name}}"
  when: (item.get('django_alias') == 'proxy' and item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"

- name: Grant usage on plproxy FDW
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  shell: "{{postgres_install_dir}}/bin/psql -U postgres -p {{postgresql_port}} {{item.name}} -c \"GRANT USAGE on FOREIGN DATA WRAPPER plproxy to {{item.get('user', localsettings.PG_DATABASE_USER)}}\""
  when: (item.get('django_alias') == 'proxy' and item.get('host', localsettings.PG_DATABASE_HOST) == inventory_hostname) or is_monolith|bool
  with_items: "{{ postgresql_dbs }}"
