---
# roles/postgresql/tasks/main.yml

- name: Add PosgreSQL apt repo
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_lsb.codename}}-pgdg main' state=present
  register: add_postgresql_repo
  tags:
    - pgbouncer

- name: Add PosgreSQL apt key
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present
  tags:
    - pgbouncer

- name: Update package list
  apt: update_cache=yes
  when: add_postgresql_repo|changed
  tags:
    - pgbouncer

- name: Install PostgreSQL & dependencies
  apt: name={{ item }} state=present
  with_items:
    - postgresql-{{ postgresql_version }}
    - libpq-dev
    - python-psycopg2
  when:
    pg_install == True

- name: Check for original postgresql directory
  stat: path="{{ postgresql_dir_original_path }}/{{ postgresql_version }}"
  register: orig_path
  when: pg_install == True

- name: Make new postgresql directory
  sudo: yes
  file:
    path: '{{ postgresql_dir_path }}'
    owner: postgres
    group: postgres
    mode: 0755
    state: directory
  when: pg_install == True

- name: Check for new postgresql directory
  stat: path="{{ postgresql_dir_path }}/{{ postgresql_version }}"
  register: new_path
  when: pg_install == True

- name: Assert postgresql directory shows up in exactly one place
  fail: msg="postgresl directory must either be {{ postgresql_dir_path }} or {{ postgresql_dir_original_path }} (and not both)"
  when: >
    pg_install == True and
    ((orig_path.stat.exists and new_path.stat.exists) or (not orig_path.stat.exists and not new_path.stat.exists))

- name: Move postgres to encrypted drive
  command: "mv {{ postgresql_dir_original_path }}/{{ postgresql_version }} {{ postgresql_dir_path }}/{{ postgresql_version }}"
  when: pg_install == True and orig_path.stat.exists

- name: generate en_US.UTF-8 locale
  locale_gen: name='en_US.UTF-8' state=present
  when:
    pg_install == True

- name: PostgreSQL app configuration
  sudo_user: postgres
  template: src=postgresql.conf.j2 dest={{ postgresql_config_home }}/postgresql.conf
  register: postgresql_configuration_updated

- name: PostgreSQL access configuration
  sudo_user: postgres
  template: src=pg_hba.conf.j2 dest={{ postgresql_config_home }}/pg_hba.conf
  register: postgresql_access_updated

- name: start postgresql
  sudo_user: postgres
  service: name=postgresql state=started

- name: Apply PostgreSQL configuration changes
  sudo_user: postgres
  service: name=postgresql state=restarted
  when: postgresql_configuration_updated.changed or postgresql_access_updated.changed

- name: Create PostgreSQL databases
  sudo_user: postgres
  postgresql_db: name={{ item }} state=present
  with_items: postgresql_dbs
  when:
    pg_install == True

- name: Create Custom PostgreSQL databases
  sudo_user: postgres
  postgresql_db: name={{ item }} state=present
  with_items: CUSTOM_DATABASES
  when:
    pg_install == True

- name: Create PostgreSQL users
  sudo_user: postgres
  postgresql_user:
    name: "{{ localsettings.PG_DATABASE_USER }}"
    password: "{{ localsettings.PG_DATABASE_PASSWORD }}"
    role_attr_flags: CREATEDB
    state: present
  when:
    pg_install == True

- name: Install pgbouncer
  apt: name=pgbouncer state=present
  when:
    pg_install == True
  tags:
    - pgbouncer

- name: pgbouncer configuration
  template: src=pgbouncer.ini.j2 dest={{ pg_bouncer_ini }}
  register: pgb_configuration_updated
  tags:
    - pgbouncer

- name: pgbouncer users
  template: src=pgbouncer.users.j2 dest={{ pg_bouncer_users }}
  register: pgb_userlist_updated
  tags:
    - pgbouncer

- name: pgbouncer defaults
  template: src=pgbouncer.defaults.j2 dest=/etc/default/pgbouncer
  tags:
    - pgbouncer

- name: Apply pgbouncer configuration changes
  service: name=pgbouncer state=reloaded
  when: pgb_configuration_updated.changed or pgb_userlist_updated.changed
  tags:
    - pgbouncer

- name: start pgbouncer
  service: name=pgbouncer state=started
  tags:
    - pgbouncer
