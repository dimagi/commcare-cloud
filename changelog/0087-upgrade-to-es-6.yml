title: Upgrade to Elasticsearch 6
key: upgrade-to-es-6
date: 2025-04-16
optional_per_env: no

min_commcare_version: # will add later

context: |
  Upgrade to Elasticsearch 6.
  This changelog outlines the steps required to `reindex` all indices and then perform the upgrade from Elasticsearch 5.6.16 to 6.8.23.

details: |
  Currently, CommCare HQ is configured to run with Elasticsearch 5.6.16. Support for Elasticsearch 6.8.23 has recently been added in HQ. So everyone who is hosting CommCare HQ should upgrade to this version.
  Support for Elasticsearch 5.6.16 will be removed soon.

update_steps: |
  The Elasticsearch upgrade is a multi-step process.
  1. Reindex all HQ indices.
  2. Swap the indices to start reading from and writing to the new index.
  3. Upgrade Elasticsearch to the newversion.
  4. Verify the upgrade.

  ## Reindex all indices

  1. Deploy the latest version of CommCare HQ.
  2. Ensure that there is enough free space available in your cluster. The command to estimate disk space required for reindexing is:

      ```sh
      cchq <env> django-manage elastic_sync_multiplexed estimated_size_for_reindex
      ```
  3. Check disk usage on each node
      - If you have separate data nodes, check disk usage on data nodes
          ```sh
          cchq <env>  run-shell-command es_data "df -h /opt/data" -b
          ```
      - If you don't have separate data nodes, check disk usage on ES nodes.
          ```sh
          cchq <env>  run-shell-command elasticsearch "df -h /opt/data" -b
          ```
      This will return disk usage for each node. Ensure that the cumulative available space across all nodes is greater than the total recommended space from the `estimated_size_for_reindex` output.

  4. Update the `environments/<env>/public.yml`
    - Before we start reindexing, we need to ensure that the following parameters are set to the correct values in the `public.yml` file

      #####  Elasticsearch Major Version for which we will be reindexing
      ```yaml
      ELASTICSEARCH_MAJOR_VERSION: 6
      ```

      ##### Index Multiplexer Settings
      ```yaml
      ES_APPS_INDEX_MULTIPLEXED: True
      ES_CASE_SEARCH_INDEX_MULTIPLEXED: True
      ES_CASES_INDEX_MULTIPLEXED: True
      ES_DOMAINS_INDEX_MULTIPLEXED: True
      ES_FORMS_INDEX_MULTIPLEXED: True
      ES_GROUPS_INDEX_MULTIPLEXED: True
      ES_SMS_INDEX_MULTIPLEXED: True
      ES_USERS_INDEX_MULTIPLEXED: True
      ```
      The multiplexer settings when set to `True` will start writing data to both the old and new indices, but reads will only go to the old index.

      ##### Index Swap Settings
      ```yaml
      ES_APPS_INDEX_SWAPPED: False
      ES_CASE_SEARCH_INDEX_SWAPPED: False
      ES_CASES_INDEX_SWAPPED: False
      ES_DOMAINS_INDEX_SWAPPED: False
      ES_FORMS_INDEX_SWAPPED: False
      ES_GROUPS_INDEX_SWAPPED: False
      ES_SMS_INDEX_SWAPPED: False
      ES_USERS_INDEX_SWAPPED: False
      ```
      Ensure the index swapped settings are `False`. When set to `True`, reads and writes will go to the new index. They will be set to `True` after the reindexing process is complete.

      If you don't see these variables in the `public.yml` file, you should add them in the `localsettings:` block. They are required to run the reindexing process.

      If you want to understand more about these variables, read our [Adapter Design](https://github.com/dimagi/commcare-hq/blob/master/corehq/apps/es/README.rst#adapter-design) document.

  5. Run update config and restart the services to apply the changes.

      ```sh
      cchq <env> django-manage update_config
      cchq <env> django-manage restart_services
      ```
  6. Run the reindexing process.
  > If you don't have enough space available in your elasticsearch cluster, it is recommended to add more storage capacity before reindexing. If you don't have the option to add more storage, you will need to reindex one index at a time. You should follow the process described in [Reindexing One Index at A Time](https://github.com/dimagi/commcare-hq/blob/master/corehq/apps/es/REINDEX_PROCESS.md#reindexing-one-index-at-a-time)


  It is advised to run the following steps in a tmux session as they might take a long time and can be detached/re-attached as needed for monitoring progress.

      - To start a tmux session in your django-manage machine, use the following steps, changing `<env>` to your environment name where needed:

        ```bash
        cchq <env> tmux django_manage
        sudo -iu cchq
        cd /home/cchq/www/<env>/current
        source python_env/bin/activate
        ```
  
  7. The following steps should be performed serially for each canonical index name, replacing `${INDEX_CNAME}` with each of the following values `['apps', 'cases', 'case_search', 'domains', 'forms', 'groups', 'sms', 'users']`

      1. Set the `${INDEX_CNAME}` environment variable. For example, the first run should be:
          ```bash
          INDEX_CNAME='apps'
          ```
    
      2. Start the reindex process

          ```bash
          ./manage.py elastic_sync_multiplexed start ${INDEX_CNAME}
          ```
          Note down the Task Number that is displayed by the command. It should be a numeric ID and will be required to verify the reindex process.

      3. Verify the reindex is completed by querying the logs and ensuring that the doc count matches between primary and secondary indices. The commands in this step should be run from the control machine.

          1. Login to the control machine in a new shell.
              ```
              cchq <env> ssh control
              ```
          2. From control machine, run the following command to query the reindex logs.
              ```
              cchq <env> run-shell-command elasticsearch "grep '<Task Number>.*ReindexResponse' /opt/data/elasticsearch*/logs/*.log"
              ```

              This command will query the Elasticsearch nodes to find any log entries containing the `ReindexResponse` for the given Task Number. The log should look something like:

              ```
              [2023-10-25 08:59:37,648][INFO] [tasks] 29216 finished with response ReindexResponse[took=1.8s,updated=0,created=1111,batches=2,versionConflicts=0,noops=0,retries=0,throttledUntil=0s,indexing_failures=[],search_failures=[]]
              ```

              Ensure that `search_failures` and `indexing_failures` are empty lists.

          3. Then verify doc counts match between primary and secondary indices using:

              ```
              cchq <env> django-manage elastic_sync_multiplexed display_doc_counts <index_cname>
              ```

              This command will display the document counts for both the primary and secondary indices for a given index. If the doc count matches between the two and there are no errors in the reindex logs, then reindexing is complete for that index.

              Please note that the counts may not match perfectly for high frequency indices like case_search, cases, and forms. In such cases, ensure the difference in counts is small (within one hundred) and there are no errors in reindex logs.

              If reindex fails for any index, please refer to the docs [here](https://github.com/dimagi/commcare-hq/blob/master/corehq/apps/es/REINDEX_PROCESS.md#common-issues-resolutions-during-reindex) for troubleshooting steps.

    4. If doc counts match and there are no errors present in the reindex logs, the reindex for the current index is complete. You can continue reindexing for the next index by repeating steps 7.1-7.3 with `${INDEX_CNAME}` set to 'cases', 'case_search' and so on for all indices.


  ## Swap the indices

  Once all the indices have been reindexed, we can swap the indices to start reading and writing to the new index.

  1. Update the index swap settings in the public.yml file.

      ```yaml
      ES_APPS_INDEX_SWAPPED: True
      ES_CASE_SEARCH_INDEX_SWAPPED: True
      ES_CASES_INDEX_SWAPPED: True
      ES_DOMAINS_INDEX_SWAPPED: True
      ES_FORMS_INDEX_SWAPPED: True
      ES_GROUPS_INDEX_SWAPPED: True
      ES_SMS_INDEX_SWAPPED: True
      ES_USERS_INDEX_SWAPPED: True
      ```

  2. Run update config and restart the services to apply the changes.

      ```sh
      cchq <env> django-manage update_config
      cchq <env> django-manage restart_services
      ```

  3. Ensure that CommCare HQ is running fine with the new index. You can do it by testing the reports in your hosted CommCare instance. Optional but recommended: You can keep CommCare HQ in this state for a few working hours to ensure that the new index is stable.

  4. Turn off multiplexing by setting the following variables to `False` in the public.yml file.

      ```yaml
      ES_APPS_INDEX_MULTIPLEXED: False
      ES_CASE_SEARCH_INDEX_MULTIPLEXED: False
      ES_CASES_INDEX_MULTIPLEXED: False
      ES_DOMAINS_INDEX_MULTIPLEXED: False
      ES_FORMS_INDEX_MULTIPLEXED: False
      ES_GROUPS_INDEX_MULTIPLEXED: False
      ES_SMS_INDEX_MULTIPLEXED: False
      ES_USERS_INDEX_MULTIPLEXED: False
      ```

  5. Run update config and restart the services to apply the changes.

      ```sh
      cchq <env> django-manage update_config
      cchq <env> django-manage restart_services
      ```
  6. Ensure that CommCare HQ is running fine with the new index. The simplest way is to check that a report works as expected.

  7. Delete old and unused Elasticsearch Indices created by CommCare HQ by running the following commands. The command will ask you confirm the deletion by typing in the index name. 
    ```
      cchq <env> django-manage elastic_sync_multiplexed delete apps
      cchq <env> django-manage elastic_sync_multiplexed delete cases
      cchq <env> django-manage elastic_sync_multiplexed delete case_search
      cchq <env> django-manage elastic_sync_multiplexed delete domains
      cchq <env> django-manage elastic_sync_multiplexed delete forms
      cchq <env> django-manage elastic_sync_multiplexed delete groups
      cchq <env> django-manage elastic_sync_multiplexed delete sms
      cchq <env> django-manage elastic_sync_multiplexed delete users
    ``` 
  8. Delete residual indices from elasticsearch that do not belong to CommCare HQ. The command will ask you to confirm the deletion by typing in the index name.
    
    ```
      cchq <env> django-manage elastic_sync_multiplexed remove_residual_indices
    ```

  9. At this state you would be ready to upgrade the Elasticsearch version.

  ## Upgrade the Elasticsearch version

    The steps below outline the process to upgrade the Elasticsearch version from 5.6.16 to 6.8.23.
  
  ### Pre-Upgrade Steps

    1. Start by ssh-ing into the control machine...
    ```sh
      cchq <env> ssh control
    ```

    2. Start a new tmux session
    ```sh
      tmux new -s es_upgrade
    ```

    3. For commands including `${ENV}` and `${ES_HOST}` below to work, make sure to set `ENV` to the name of your environment, and `ES_HOST` to the IP address of one of your ES nodes:
    ```sh
      ENV=<env>
      ES_HOST=$(cchq ${ENV} lookup elasticsearch:0 | cut -d' ' -f1)
    ```
    4. Make sure that the disk usage is below 47%,
  or that you have a place to back up to on another disk or remotely. You can check disk usage on each elasticsearch host usage by running:
    ```sh
      cchq ${ENV} run-shell-command elasticsearch  "du -sh  /opt/data/elasticsearch-5.6.16" -b
    ```

    5. After you have figured out the backup strategy and ensured sufficient disk space, continue with the steps below.
  
  ### Upgrade Steps

  1. Add the following parameters to your environment's `public.yml`:
    
    ```yaml
    elasticsearch_version: 6.8.23
    elasticsearch_download_sha256: 424af91f838f9e5f13e0292f97cbd6333535450291a621d761bd479dfc2dff78.
    .
    .
    localsettings:
      ...
      ELASTICSEARCH_MAJOR_VERSION: 6
    ```

  2. Pull the latest commcare-cloud changes on control machine.
    
    ```sh
      cd ${COMMCARE_CLOUD_REPO} && git pull
    ```

  3. Stop commcare services.

    ```sh
      cchq ${ENV} downtime start
    ```
  
  4. Apply the settings that you have updated in Step 1.

    ```sh
      cchq ${ENV} update-config
    ```

  5. Disable Elasticsearch shard allocation. It should already be disabled, but run this command to ensure that it is already disabled.

    ```sh
      curl -X PUT "${ES_HOST}:9200/_cluster/settings?pretty" -H 'Content-Type: application/json' -d'
      {
        "persistent": {
          "cluster.routing.allocation.enable": "none"
        }
      }
      '

    ```

  6. Perform a synced flush.

    ```sh
      curl -X POST "${ES_HOST}:9200/_flush/synced?pretty"  # safe to reissue a few times if it fails
    ```

  7. Stop the Monit and Elasticsearch services.

    ```sh
      cchq ${ENV} run-shell-command elasticsearch "service monit stop" -b

      cchq ${ENV} run-shell-command elasticsearch "service elasticsearch stop" -b
    ```

  8. Make a backup of the 5.6.16 data directory. If you are backing up on the same machine then one way to do it is by:
    
    ```sh
      cchq ${ENV} run-shell-command elasticsearch "rsync -av /opt/data/elasticsearch-5.6.16 /opt/data/elasticsearch-5.6.16-backup" -b
    ```
  9. Install and run the new version of Elasticsearch.

    ```sh
      cchq ${ENV} ansible-playbook deploy_stack.yml --limit=elasticsearch --tags=elasticsearch
    ```

  10. Stop the Monit and Elasticsearch services.

    ```sh
      cchq ${ENV} run-shell-command elasticsearch "service monit stop" -b

      cchq ${ENV} run-shell-command elasticsearch "service elasticsearch stop" -b
    ```

  11. Rename the newly created 6.8.23 data directory so it’s out of the way and then move the 5.6.16 data directory to the new 6.8.23 data directory location.

    ```sh
      cchq ${ENV} run-shell-command elasticsearch "mv /opt/data/elasticsearch-6.8.23 /opt/data/elasticsearch-6.8.23-new-installation" -b

      cchq ${ENV} run-shell-command elasticsearch "mv /opt/data/elasticsearch-5.6.16 /opt/data/elasticsearch-6.8.23" -b
    ```

  12. With Elasticsearch 6 the cluster name is not allowed in data path, so we move data directory up one level.

  You might see an error if there is no cluster name in your elasticsearch data path and that is fine. It can happen if you have a relatively new installation.

    ```sh
      cchq ${ENV} run-shell-command elasticsearch "mv /opt/data/elasticsearch-6.8.23/data/<cluster_name>/* /opt/data/elasticsearch-6.8.23/data/" -b
    ```
  13. Verify the size of the data directory, this should spit out all the indexes on disk.

    ```sh
      cchq ${ENV} run-shell-command elasticsearch "du -chd 1 /opt/data/elasticsearch-6.8.23" -b
    ```

  13. Verify the permissions, ensure that both user and group are set to `elasticsearch`.

    ```sh
      cchq ${ENV} run-shell-command  elasticsearch  "ls -al  /opt/data/elasticsearch-6.8.23" -b
    ```

  14. Verify that the tmp directory exists. If it does not, create it and assign it the right permissions.

    ```sh
      cchq ${ENV} run-shell-command elasticsearch "mkdir /opt/data/elasticsearch-6.8.23/tmp" -b
      cchq ${ENV} run-shell-command elasticsearch "chown -R elasticsearch:elasticsearch /opt/data/elasticsearch-6.8.23/tmp" -b
    ```
    The command might throw an error if the directory already exists. That is fine.

  15. Start the Monit and Elasticsearch services.

    ```sh
      cchq ${ENV} run-shell-command elasticsearch "service monit start" -b

      cchq ${ENV} run-shell-command elasticsearch "service elasticsearch start" -b 
    ```

  16. You can also check the shard allocation status of the indices by running: 

    ```sh
      cchq ${ENV} django-manage elastic_sync_multiplexed display_shard_info
    ```
  
    If your shards are not getting allocated, you can try enabling the cluster routing settings by running:

    ```sh
      curl -X PUT "${ES_HOST}:9200/_cluster/settings?pretty" -H 'Content-Type: application/json' -d'
      {
        "persistent": {
          "cluster.routing.allocation.enable": "all"
        }
      }
      '
    ```


  17. Verify that the cluster status is yellow. The cluster status can be red in the beginning and should go yellow and then green eventually. You can run the command below periodically to monitor the cluster status. 

    ```sh
      curl -XGET "${ES_HOST}:9200/_cluster/health?pretty"
    ```

  18. Start the site.
    
    ```sh
      cchq ${ENV} downtime end
    ```
  
  ## Verify the upgrade

  1. Run check services command to verify that the services are running fine.

    ```sh
      cchq ${ENV} check-services
    ```
  2. Do a smoke test in HQ by clicking around and making sure that the site is working fine.
  
  
  
