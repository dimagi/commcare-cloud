#  Variables.tf declares the default variables that are shared by all environments
# $var.region, $var.domain, $var.tf_s3_bucket

# This should be changed to reflect the service / stack defined by this repo
variable "stack" {
  default = "commcarehq"
}

variable "tf_s3_bucket" {
  description = "S3 bucket Terraform can use for state"
  default     = "{{ state_bucket }}"
}

module "network" {
  source            = "./modules/network"
  vpc_begin_range   =  var.vpc_begin_range
  env               =  var.environment
  azs               =  var.azs
  az_codes          =  var.az_codes
  vpn_connections   =  var.vpn_connections
  vpn_connection_routes =  var.vpn_connection_routes
  external_routes   =  var.external_routes
  region            =  var.region
}


locals {
  subnet_options = {
  {% for az in az_codes %}
    app-private-{{ az }} = lookup(module.network.subnets-app-private, "{{ az }}", "")
  {% endfor %}
  {% for az in az_codes %}
    db-private-{{ az }} = lookup(module.network.subnets-db-private, "{{ az }}", "")
  {% endfor %}
  {% for az in az_codes %}
    public-{{ az }} = lookup(module.network.subnets-public, "{{ az }}", "")
  {% endfor %}
  }
  security_group_options = {
    "public" = [module.network.proxy-sg, module.network.ssh-sg, module.network.vpn-connections-sg]
    "app-private" = [module.network.app-private-sg, module.network.ssh-sg, module.network.vpn-connections-sg]
    "db-private" = [module.network.db-private-sg, module.network.ssh-sg, module.network.vpn-connections-sg]
  }
}


data "aws_iam_role" "data_lifecycle_role" {
  name = "AWSDataLifecycleManagerDefaultRole"
}

resource "aws_dlm_lifecycle_policy" "data_volume_backups" {
  description        = "Data Volume Backup Policy"
  execution_role_arn = data.aws_iam_role.data_lifecycle_role.arn
  state              = "ENABLED"

  policy_details {
    resource_types = ["VOLUME"]

    schedule {
      name = "Default Schedule"

      create_rule {
        interval      = 24
        interval_unit = "HOURS"
        times         = ["22:00"]
      }

      retain_rule {
        count = 7
      }

      copy_tags = true
    }

    target_tags = {
      GroupDetail = "couchdb2:data"
      Group = "elasticsearch"
    }
  }
}

{% if backup_plan %}
module "backup_plan" {
  source = "./modules/backup"
  environment = var.environment
  region = var.region
  account_id = {{ account_id|tojson }}
  outside_account_id = {{ backup_plan.outside_account_id|tojson }}
  local_vault_name = {{ backup_plan.local_vault_name|tojson }}
  remote_vault_name = {{ backup_plan.remote_vault_name|tojson }}
  remote_vault_region = {{ backup_plan.remote_vault_region|tojson }}
  daily_retention = {{ backup_plan.daily_retention|tojson }}
  monthly_retention = {{ backup_plan.monthly_retention|tojson }}
  quarterly_retention = {{ backup_plan.quarterly_retention|tojson }}
  providers = {
    aws.remote_region = aws.{{ backup_plan.remote_vault_region }}
  }
}
{% endif %}

module "server_iam_role" {
  source = "./modules/server/iam"
  environment = var.environment
  account_id = {{ account_id|tojson }}
  region_name = var.region
  formplayer_request_response_logs_firehose_stream_arn = module.logshipping.formplayer_request_response_logs_firehose_stream_arn
  account_alias =  var.account_alias
  s3_blob_db_s3_bucket = var.s3_blob_db_s3_bucket
}

{% for server_spec in servers + proxy_servers %}
{%- for server_name in server_spec.get_all_server_names %}
module "server__{{ server_name }}" {
  source = "./modules/server"

  server_name = {{ server_name|tojson }}
  server_instance_type = {{ server_spec.server_instance_type|tojson }}
  network_tier = {{ server_spec.network_tier|tojson }}
  az = {{ server_spec.az|tojson }}
  volume_size = {{ server_spec.volume_size|tojson }}
  volume_type = {{ server_spec.volume_type|tojson }}
  volume_encrypted = {{ server_spec.volume_encrypted|tojson }}
  secondary_volume_size = {{ server_spec.block_device.volume_size|default(0)|tojson }}
  secondary_volume_type = {{ server_spec.block_device.volume_type|default("")|tojson }}
  secondary_volume_encrypted = {{ server_spec.block_device.encrypted|default(False)|tojson }}
  secondary_volume_enable_cross_region_backup = {{ server_spec.block_device.enable_cross_region_backup|default(False)|tojson }}
  server_auto_recovery = {{ server_spec.server_auto_recovery|default(False)|tojson }}
  iam_instance_profile = module.server_iam_role.commcare_server_instance_profile
  metadata_tokens = "{{ 'required' if ec2_metadata_tokens_required else 'optional' }}"
  enable_cross_region_backup = {{ server_spec.enable_cross_region_backup|tojson }}

{% if server_spec.os == 'ubuntu_pro_bionic' %}
  server_image = data.aws_ami.ubuntu_pro_bionic.id
{% elif server_spec.os == 'bionic' %}
  server_image = data.aws_ami.ubuntu_bionic.id
{% elif server_spec.os == 'jammy' %}
  server_image = data.aws_ami.ubuntu_jammy.id
{% else %}
  server_image = data.aws_ami.ubuntu_jammy.id
{% endif %}
  environment = var.environment
  vpc_id = module.network.vpc-id
  subnet_options = local.subnet_options
  security_group_options = local.security_group_options
  key_name = var.key_name
  group_tag= {{ server_spec.group|tojson }}
}
{%- endfor %}
{% endfor %}

resource "aws_efs_file_system" "formplayer" {
  encrypted = true
  lifecycle_policy {
    transition_to_ia = "AFTER_7_DAYS"
  }
  tags = {
    Name = "formplayer"
  }
}


{%- for az in az_codes %}
resource "aws_efs_mount_target" "formplayer-{{ az }}" {
  file_system_id = aws_efs_file_system.formplayer.id
  subnet_id      = lookup(module.network.subnets-app-private, "{{ az }}", "")
  security_groups = [module.network.app-private-sg]
}
{% endfor %}

{% if elasticache %}
module "Redis" {
  source               = "./modules/elasticache"
  create               = "{{ elasticache.create|tojson }}"
  cluster_id           = "elasticache-${var.environment}"
  engine               = "elasticache"
  engine_version       = "{{ elasticache.engine_version }}"
  node_type            = "{{ elasticache.node_type }}"
  num_cache_nodes      = "{{ elasticache.num_cache_nodes }}"
  parameter_group_name = "{{ elasticache.parameter_group_name }}"
  port                 = 6379
  elasticache_subnets  = values(module.network.subnets-db-private)
  security_group_ids   = compact([module.network.elasticache-sg, module.network.vpn-connections-sg])
}
{% endif %}

{% if elasticache_cluster %}
module "elasticache-module-base" {
  source                = "./modules/elasticache-cluster"
  create               = "{{ elasticache_cluster.create|tojson }}"
  namespace             = "${var.environment}-elasticache-cluster"
  cluster_id            = "${var.environment}-elasticache-cluster"
  subnet_ids_cache      = values(module.network.subnets-db-private)
  securitygroup_id      = compact([module.network.db-private-sg, module.network.ssh-sg, module.network.vpn-connections-sg])
  cache_engine          = {{ elasticache_cluster.cache_engine|tojson }}
  cache_engine_version  = {{ elasticache_cluster.cache_engine_version|tojson }}
  cache_node_type       = {{ elasticache_cluster.cache_node_type|tojson }}
  cache_prameter_group  = {{ elasticache_cluster.cache_prameter_group|tojson }}
  automatic_failover    = {{ elasticache_cluster.automatic_failover|tojson }}
  transit_encryption    = {{ elasticache_cluster.transit_encryption|tojson }}
  at_rest_encryption    = {{ elasticache_cluster.at_rest_encryption|tojson }}
  multi_az              = {{ elasticache_cluster.multi_az|tojson }}
  auto_minor_version    = {{ elasticache_cluster.auto_minor_version|tojson }}
  maintenance_window    = {{ elasticache_cluster.maintenance_window|tojson }}
  snapshot_retention    = {{ elasticache_cluster.snapshot_retention|tojson }}
  snapshot_window       = {{ elasticache_cluster.snapshot_window|tojson }}
  port_number           = 6379
  cluster_size          = {{ elasticache_cluster.cluster_size|tojson }}
  replication_group_des = "${var.environment}-redis-cluster"
}
{% endif %}

{% if r53_private_zone %}
module "r53-private-zone-create" {
  source      = "./modules/r53-private-zone-create-update"
  create      = "{{ r53_private_zone.create|tojson }}"
  zone_vpc_id = module.network.vpc-id
  domain_name = {{ r53_private_zone.domain_name|tojson }}
  route_names = {{ r53_private_zone.route_names|tojson }}
  create_record      = "{{ r53_private_zone.create_record|tojson }}"
  records     = module.elasticache-module-base.primary_configuration_endpoint_address
}
{% endif %}

module "Users" {
  source = "./modules/iam"
  account_alias = var.account_alias
}

{%- for user in (users if manage_users else []) %}
{%- if user.public_key %}
resource "aws_key_pair" {{ user.username|tojson }} {
  key_name = {{ user.username|tojson }}
  public_key = {{ user.public_key|tojson }}
}
{%- endif %}
{% if credential_style == 'iam' %}
module "iam_user__{{ user.username }}" {
  source = "./modules/iam/user"
  username = {{ user.username|tojson }}
  administrators_iam_group = module.Users.administrators_iam_group
}
{% endif %}
{%- endfor %}

module "logshipping" {
  environment = var.environment
  source = "./modules/logshipping"
  account_id = {{ account_id|tojson }}
}

{% if release_bucket %}
module "autoscaling" {
  source = "./modules/autoscaling"
  release_bucket = var.release_bucket
  commcare_server_role_id = module.server_iam_role.commcare_server_role_id
}
{% endif %}

module "ga_alb_waf" {
  source = "./modules/ga_alb_waf"
  environment = var.environment
  security_groups = [module.network.alb-sg]
  subnets = [
    {%- for az in az_codes %}{% if not loop.first %}, {% endif %}
    lookup(module.network.subnets-app-private, "{{ az }}", "")
    {%- endfor %}
  ]
  log_bucket_name = module.logshipping.log_bucket_name
  log_bucket_arn = module.logshipping.log_bucket_arn
  vpc_id = module.network.vpc-id
  SITE_HOST = {{ SITE_HOST|tojson }}
  NO_WWW_SITE_HOST = {{ NO_WWW_SITE_HOST|tojson }}
  ALTERNATE_HOSTS = {{ ALTERNATE_HOSTS|tojson }}
  proxy_server_ids = [
    {%- for server_spec in proxy_servers %}{% if not loop.first %}, {% endif %}
    module.server__{{ server_spec.server_name }}.server
    {%- endfor %}
  ]
  account_id = {{ account_id|tojson }}
  ssl_policy = {{ ssl_policy|tojson }}
  commcarehq_xml_post_urls_regex = [{% for regex_string in commcarehq_xml_post_urls_regex %}{
    regex_string = {{ regex_string|tojson }}
  },{% endfor %}]
  commcarehq_xml_querystring_urls_regex = [{% for regex_string in commcarehq_xml_querystring_urls_regex %}{
    regex_string = {{ regex_string|tojson }}
  },{% endfor %}]
}


{% for pgbouncer_nlb in pgbouncer_nlbs %}
module "pgbouncer_nlb__{{ pgbouncer_nlb.name }}" {
  source = "./modules/pgbouncer_nlb"
  vpc_id   = module.network.vpc-id
  nlb_identifier = "{{ pgbouncer_nlb.identifier }}"
  subnets = [
    {%- for az in az_codes %}{% if not loop.first %}, {% endif %}
    lookup(module.network.subnets-app-private, "{{ az }}", "")
    {%- endfor %}
  ]
  environment = var.environment
  server_ids = [
    {%- for server_id in pgbouncer_nlb.targets %}{% if not loop.first %}, {% endif %}
    module.server__{{ server_id }}.server
    {%- endfor %}
  ]
}

{% endfor %}

{% for internal_alb in internal_albs %}
module "internal_alb__{{ internal_alb.name }}" {
  source = "./modules/internal_alb"
  vpc_id   = module.network.vpc-id
  alb_identifier = "{{ internal_alb.identifier }}"
  target_port = "{{ internal_alb.target_port }}"
  listener_port = "{{ internal_alb.listener_port }}"
  health_check_interval = "{{ internal_alb.health_check_interval }}"
  security_groups = [module.network.db-private-sg]
  subnets = [
    {%- for az in az_codes %}{% if not loop.first %}, {% endif %}
    lookup(module.network.subnets-app-private, "{{ az }}", "")
    {%- endfor %}
  ]
  environment = var.environment
  server_ids = [
    {%- for server_id in internal_alb.targets %}{% if not loop.first %}, {% endif %}
    module.server__{{ server_id }}.server
    {%- endfor %}
  ]
}

{% endfor %}

{% if ec2_auto_recovery %}
{% for cloudwatch_alarm in ec2_auto_recovery %}
module "cloudwatch_alarm__{{ cloudwatch_alarm.name_prefix }}" {
  source = "./modules/cloudwatch"
  name_prefix = {{ cloudwatch_alarm.name_prefix|tojson }}
  ec2_instance_ids = [
    {%- for instance_ids in cloudwatch_alarm.targets %}{% if not loop.first %}, {% endif %}
    module.server__{{ instance_ids }}.server
    {%- endfor %}
  ]
}
{% endfor %}
{% endif %}

{% if efs_file_systems %}
{% for efs_file_system in efs_file_systems %}
module "efs_file_system__{{ efs_file_system.efs_name }}" {
  source = "./modules/efs_file_system"
  create      = "{{ efs_file_system.create|tojson }}"
  efs_name    = {{ efs_file_system.efs_name|tojson }}
  transition_to_ia = {{ efs_file_system.transition_to_ia|tojson }}
  namespace        = var.environment
  create_access    = "{{ efs_file_system.create_access|tojson }}"
}
{% endfor %}

{%- for az in az_codes %}
{%- for efs_file_system_mount in efs_file_systems %}
module "efs_mount__{{ efs_file_system_mount.efs_name }}__{{ az }}" {
  source = "./modules/efs_file_system/mount-point"
  create_mount   = "{{ efs_file_system_mount.create_mount|tojson }}"
  file_system_id = module.efs_file_system__{{ efs_file_system_mount.efs_name }}.efs_id
  subnet_ids_efs = lookup(module.network.subnets-app-private, "{{ az }}", "")
  securitygroup_id = [module.network.app-private-sg]
}
{% endfor %}
{% endfor %}

{%- for efs_file_system_route53 in efs_file_systems %}
    module "efs_route53__{{ efs_file_system_route53.efs_name }}" {
        source = "./modules/r53-record-create-update"
        create_record   = "{{ efs_file_system_route53.create_record|tojson }}"
        domain_name = {{ efs_file_system_route53.domain_name|tojson }}
        route_names = {{ efs_file_system_route53.route_names|tojson }}
        records = module.efs_file_system__{{ efs_file_system_route53.efs_name }}.efs_endpoint_address
      }
{% endfor %}

{% endif %}

{% if fsx_file_systems %}
{% for fsx_file_system in fsx_file_systems %}
module "fsx_file_system__{{ fsx_file_system.efs_name }}" {
  source = "./modules/fsx_file_system"
  create               = {{ fsx_file_system.create|tojson }}
  fsx_name             = {{ fsx_file_system.fsx_name|tojson }}
  namespace            = "${var.environment}"
  storage_capacity     = {{ fsx_file_system.storage_capacity|tojson }}
  throughput_capacity  = {{ fsx_file_system.throughput_capacity|tojson }}
  fsx_subnet_ids       = ["${lookup(module.network.subnets-app-private, "a", "")}"]
  security_group_ids = [module.network.app-private-sg]
}
{% endfor %}

{% endif %}

module "awsmq" {
  source                	= "./modules/awsmq"
  broker_name             = {{ awsmq.broker_name|tojson }}  
  vpc_id = module.network.vpc-id  
  apply_immediately     	=  {{ awsmq.apply_immediately|tojson }}
  auto_minor_version_upgrade 	= {{ awsmq.auto_minor_version_upgrade|tojson }}
  deployment_mode 		= {{ awsmq.deployment_mode|tojson }}
  subnet_ids			    = ["${lookup(module.network.subnets-app-private, "a", "")}"]
  security_groups    	= compact([module.network.db-private-sg, module.network.ssh-sg, module.network.vpn-connections-sg])
  environment = var.environment
  account_alias = var.account_alias
  username            = var.username
  password            = var.password
  engine_type			= {{ awsmq.engine_type|tojson }}
  engine_version  = {{ awsmq.engine_version|tojson }}
  host_instance_type 		= {{ awsmq.host_instance_type|tojson }}
  publicly_accessible		= {{ awsmq.publicly_accessible|tojson }}
  encryption_enabled    = {{ awsmq.encryption_enabled|tojson }}
  logs_general          = {{ awsmq.logs_general|tojson }}
}    
