---

# Install pglogical extension
- hosts:
    - shard_dbs
  become: yes
  vars_files:
    - roles/postgresql_base/defaults/main.yml
  tasks:
    - name: Create pglogical extension (providers)
      become: yes
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      postgresql_ext:
        name: pglogical
        db: "{{item.source_db_name}}"
        port: "{{ postgresql_port }}"
      with_items: "{{ replications }}"
      when: item.source_host == inventory_hostname

    - name: Create pglogical extension (subscribers)
      become: yes
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      postgresql_ext:
        name: pglogical
        db: "{{item.target_db_name}}"
        port: "{{ replications }}"
      with_items: "{{ replications }}"
      when: item.target_host == inventory_hostname

# Set up provider nodes
- hosts:
    - shard_dbs
  become: yes
  become_user: postgres
  vars_files:
    - roles/postgresql_base/defaults/main.yml
  vars:
    - form_processor_replication_tables:
        - table_name: form_processor_xforminstancesql
          hash_fn: "hash_string(form_id, ''siphash24'')"
        - table_name: form_processor_xformoperationsql
          hash_fn: "hash_string(form_id, ''siphash24'')"
        - table_name: form_processor_xformattachmentsql
          hash_fn: "hash_string(form_id, ''siphash24'')"
        - table_name: form_processor_commcarecasesql
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: form_processor_commcarecaseindexsql
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: form_processor_caseattachmentsql
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: form_processor_casetransaction
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: form_processor_ledgervalue
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: form_processor_ledgertransaction
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: scheduling_casealertscheduleinstance
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: scheduling_casetimedscheduleinstance
          hash_fn: "hash_string(case_id, ''siphash24'')"
        - table_name: scheduling_alertscheduleinstance
          hash_fn: "hash_string(decode(replace(schedule_instance_id::text, ''-'', ''''), ''hex''), ''siphash24'')"
        - table_name: scheduling_timedscheduleinstance
          hash_fn: "hash_string(decode(replace(schedule_instance_id::text, ''-'', ''''), ''hex''), ''siphash24'')"
        - table_name: blobs_blobmeta
          hash_fn: "hash_string(parent_id, ''siphash24'')"
        - table_name: blobs_deletedblobmeta
          hash_fn: "hash_string(parent_id, ''siphash24'')"
  tasks:
    - name: Create node
      postgresql_query:
        db: '{{ item.source_db_name }}'
        query: "SELECT pglogical.create_node(node_name := '{{ item.source_db_name }}_provider', dsn := 'host={{ item.source_host }} port=5432 dbname={{ item.source_db_name }} user={{ postgres_users.replication.username}} password={{ postgres_users.replication.password }}')"
      with_items: "{{ replications }}"
      when: item.source_host == inventory_hostname
      register: result
      failed_when:
        - result.failed
        - '"node {{ item.source_db_name }}_provider already exists" not in result.msg'
        - '"current database is already configured as pglogical node" not in result.msg'

    - name: Create replication set
      postgresql_query:
        db: '{{ item.source_db_name }}'
        query: "SELECT pglogical.create_replication_set(set_name := '{{ item.source_db_name }}_{{ item.replication_set.0 }}_{{ item.replication_set.1 }}')"
      with_items: "{{ replications }}"
      when: item.source_host == inventory_hostname
      register: result
      failed_when:
        - result.failed
        - '"replication set {{ item.source_db_name }}_{{ item.replication_set.0 }}_{{ item.replication_set.1 }} already exists" not in result.msg'

    - name: Add tables to replication set
      postgresql_query:
        db: '{{ item.0.source_db_name }}'
        query: "SELECT pglogical.replication_set_add_table(set_name := '{{ item.0.source_db_name }}_{{ item.0.replication_set.0 }}_{{ item.0.replication_set.1 }}',relation := '{{ item.1.table_name }}',row_filter := '{{ item.1.hash_fn }} & 1023 BETWEEN {{ item.0.replication_set.0}} AND {{ item.0.replication_set.1}}')"
      loop: "{{ replications|product(form_processor_replication_tables)|list }}"
      when: item.0.source_host == inventory_hostname
      register: result
      failed_when:
        - result.failed
        - '"duplicate key value violates unique constraint" not in result.msg'

    - name: Add sequences to replication set
      postgresql_query:
        db: '{{ item.source_db_name }}'
        query: "SELECT pglogical.replication_set_add_all_sequences(set_name := '{{ item.source_db_name }}_{{ item.replication_set.0 }}_{{ item.replication_set.1 }}',schema_names := ARRAY['public'])"
      loop: "{{ replications }}"
      when: item.source_host == inventory_hostname

# Set up subscriber nodes
- hosts:
    - shard_dbs
  become: yes
  become_user: postgres
  vars_files:
    - roles/postgresql_base/defaults/main.yml
  tasks:
    - name: Create node
      postgresql_query:
        db: '{{ item.target_db_name }}'
        query: "SELECT pglogical.create_node(node_name := '{{ item.target_db_name }}_subscriber', dsn := 'host={{ item.target_host }} port=5432 dbname={{ item.target_db_name }} user={{ postgres_users.replication.username }} password={{ postgres_users.replication.password }}');"
      loop: "{{ replications }}"
      when: item.target_host == inventory_hostname
      register: result
      failed_when:
        - result.failed
        - '"node {{ item.name }}_subscriber already exists" not in result.msg'
        - '"current database is already configured as pglogical node" not in result.msg'

    - name: Subscribe to replication set and begin synchronization
      postgresql_query:
        db: '{{ item.target_db_name }}'
        query: "SELECT pglogical.create_subscription(subscription_name := '{{ item.source_db_name }}_{{ item.replication_set.0 }}_{{ item.replication_set.1 }}_sub',provider_dsn := 'host={{ item.source_host }} port=5432 dbname={{ item.source_db_name}} user={{ postgres_users.replication.username}} password={{ postgres_users.replication.password }}',replication_sets := '{ {{ item.source_db_name }}_{{ item.replication_set.0 }}_{{ item.replication_set.1 }} }', synchronize_structure := 'true',synchronize_data := 'true');"
      loop: "{{ replications }}"
      when: item.target_host == inventory_hostname
      register: result

    - name: Grant usage to hq user
      postgres
      postgresql_query:
        db: '{{ item.target_db_name }}'
        query: "GRANT USAGE ON SCHEMA pglogical TO {{ secrets.POSTGRES_USERS.commcare }};"
      loop: "{{ replications }}"
      when: item.target_host == inventory_hostname

# status
- hosts:
    - shard_dbs
  become: yes
  become_user: postgres
  vars_files:
    - roles/postgresql_base/defaults/main.yml
  tasks:
    - name: Query provider status
      postgresql_query:
        db: '{{ item.source_db_name }}'
        query: "select application_name, sent_location, replay_location from pg_stat_replication where application_name = '{{ item.source_db_name }}_{{ item.replication_set.0 }}_{{ item.replication_set.1 }}_sub'"
      loop: "{{ replications }}"
      when: item.source_host == inventory_hostname
      register: result
      tags: status
    - name: All provider status
      debug:
        msg: "{{ result.results | reject(\"skipped\") | map(attribute=\"query_result\") | list }}"
      when: result.results | reject("skipped") | map(attribute="query_result") | list
      tags: status
    - name: Query subscriber status
      postgresql_query:
        db: '{{ item.target_db_name }}'
        query: "select pglogical.show_subscription_status('{{ item.source_db_name }}_{{ item.replication_set.0 }}_{{ item.replication_set.1 }}_sub')"
      loop: "{{ replications }}"
      when: item.target_host == inventory_hostname
      register: result
      tags: status
    - name: All subscriber status
      debug:
        msg: "{{ result.results | reject(\"skipped\") | map(attribute=\"query_result\") | list }}"
      when: result.results | reject("skipped") | map(attribute="query_result") | list
      tags: status
    - name: Query row count (provider)
      postgresql_query:
        db: '{{ item.source_db_name }}'
        query: "select count(*) from form_processor_ledgervalue"
      loop: "{{ replications | unique(attribute=\"source_host\") }}"
      when: item.source_host == inventory_hostname
      register: result
      tags: status
    - name: All provider rows
      debug:
        msg: "{{ result.results | reject(\"skipped\") | map(attribute=\"query_result\")  | first | map(attribute=\"count\") | first }}"
      when: result.results | reject("skipped") | map(attribute="query_result") | list
      tags: status
    - name: Query row count (sub)
      postgresql_query:
        db: '{{ item.target_db_name }}'
        query: "select count(*) from form_processor_ledgervalue"
      loop: "{{ replications }}"
      when: item.target_host == inventory_hostname
      register: result
      tags: status
    - name: All subscriber status
      debug:
        msg: "{{ result.results | reject(\"skipped\") | map(attribute=\"query_result\")  | first | map(attribute=\"count\") | first }}"
      when: result.results | reject("skipped") | map(attribute="query_result") | list
      tags: status

# synchronize sequences
- hosts:
    - shard_dbs
  become: yes
  become_user: postgres
  vars_files:
    - roles/postgresql_base/defaults/main.yml
  tasks:
    - name: Query provider status
      postgresql_query:
        db: '{{ item.source_db_name }}'
        query: "SELECT pglogical.synchronize_sequence( seqoid ) FROM pglogical.sequence_state"
      loop: "{{ replications }}"
      when: item.source_host == inventory_hostname
      tags: synchronize_sequences
