- name: Downloads Directory
  file: path="/home/{{ cchq_user }}/downloads/" state=directory

- name: Create elasticsearch user
  user: name=elasticsearch createhome=no password=no state=present

- name: Elasticsearch User
  user: name=elasticsearch state=present

- name: Download Elasticsearch
  become: yes
  get_url:
    url: "https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-{{ elasticsearch_version }}.tar.gz"
    dest: "/home/{{ cchq_user }}/downloads/elasticsearch-{{ elasticsearch_version }}.tar.gz"
    sha256sum: "{{ elasticsearch_download_sha256 }}"

- name: Unarchive Elasticsearch
  become: yes
  unarchive:
    src: "/home/{{ cchq_user }}/downloads/elasticsearch-{{ elasticsearch_version }}.tar.gz"
    dest: /opt/
    copy: no

- name: Chown Elasticsearch
  become: yes
  file:
    state: directory
    owner: elasticsearch
    group: elasticsearch
    recurse: yes
    path: "{{ elasticsearch_home }}"

- name: Create /etc/elasticsearch
  become: yes
  file: path="{{ elasticsearch_conf_dir }}" state=directory

- name: Copy Elasticsearch Config
  become: yes
  template:
    src: config/elasticsearch.yml.j2
    dest: "{{ elasticsearch_conf_dir }}/elasticsearch.yml"
  register: copy_elasticsearch_conf_result
  tags:
    - es_conf

- name: Copy Elasticsearch logging config
  become: yes
  template:
    src: config/logging.yml.j2
    dest: "{{ elasticsearch_conf_dir }}/logging.yml"
  register: copy_elasticsearch_logging_result
  tags:
    - es_conf

- name: Copy Elasticsearch Upstart Conf
  become: yes
  template:
    src: upstart/elasticsearch.conf.j2
    dest: "/etc/init/elasticsearch.conf"
  register: copy_elasticsearch_upstart_result
  tags:
    - es_conf

- debug: msg="If you're just updating the ES conf then you sill need to restart the cluster. Use  the 'es_rolling_restart' playbook."
  when: copy_elasticsearch_conf_result.changed

- name: Create Elasticsearch data directories
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: 0755
  with_items:
    - "{{ elasticsearch_data_dir }}"
    - "{{ elasticsearch_data_dir }}/data"
    - "{{ elasticsearch_data_dir }}/logs"

- name: Install elasticsearch python client
  become: yes
  pip:
    name: elasticsearch
    version: 1.9.0

- name: Check for installed plugins
  shell: "{{ elasticsearch_home }}/bin/plugin --list"
  register: installed_plugins

- name: Install elasticsearch aws plugin
  become: yes
  shell: "{{ elasticsearch_home }}/bin/plugin install elasticsearch/elasticsearch-cloud-aws/{{ aws_plugin_version }}"
  when: (backup_es) and (installed_plugins.stdout is defined) and ('cloud-aws' not in installed_plugins.stdout)

- name: Reload upstart
  become: yes
  shell: initctl reload-configuration

- name: Start Elasticsearch
  become: yes
  service: name=elasticsearch state=started
  register: result
  failed_when: (result.state is defined) and (result.state != "started")
  tags: after-reboot

- name: Restart Elasticsearch
  become: yes
  service: name=elasticsearch state=restarted
  when: copy_elasticsearch_conf_result.changed or copy_elasticsearch_upstart_result.changed or copy_elasticsearch_logging_result.changed
  tags:
    - es_restart

- name: Wait for elastic Search to come up, start checking after 5 second
  wait_for:
    host: "{{ groups.elasticsearch.0 }}"
    port: 9200
    delay: 5

- name: Create initial snapshot
  uri:
    url: 'http://{{ groups.elasticsearch.0 }}:9200/_snapshot/{{ es_repository_name }}'
    method: PUT
    body: ' {"type": "s3", "settings": {"bucket": "{{ es_snapshot_bucket }}", "compress": "true", "server_side_encryption": "true", "endpoint": "{{aws_endpoint}}" }}'
  when: backup_es and inventory_hostname == groups.elasticsearch.0
  tags:
    - cron
    - backups

- name: Register Local Repository
  file:
    dest: "{{ elasticsearch_data_dir }}/snapshot/"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: 0755
  when: es_local_repo and not backup_es

- name: Remove old backup script
  file:
    dest: "/etc/cron.d/create_es_snapshot.py"
    state: absent
  tags:
    - cron
    - backups

- name: Copy es backup script
  become: yes
  template:
    src: "create_es_snapshot.py.j2"
    dest: "/usr/local/sbin/create_es_snapshot.py"
    group: root
    owner: root
    mode: 0700
    backup: yes
  when: (es_local_repo or backup_es) and inventory_hostname == groups.elasticsearch.0
  tags:
    - cron
    - backups

- name: Create es backup cron job
  become: yes
  cron:
    name: "Daily ES Snapshot"
    job: "/usr/local/sbin/create_es_snapshot.py"
    hour: "{{ (nadir_hour|default(0)+4) % 24 }}"
    minute: 0
    user: root
    cron_file: create_es_snapshot
  when: (es_local_repo or backup_es) and inventory_hostname == groups.elasticsearch.0
  tags:
    - cron
    - backups
