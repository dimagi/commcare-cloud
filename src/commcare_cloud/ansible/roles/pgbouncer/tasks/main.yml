---

- name: pgbouncer install
  apt:
    name: pgbouncer
    update_cache: yes
    state: latest

- name: pgbouncer gather package facts
  package_facts:
    manager: auto
  tags:
    - configure

- name: pgbouncer quit if version is too old
  fail:
    msg: 
      - "pgbouncer version currently installed is too old"
      - "{{ ansible_facts.packages['pgbouncer'][0].version }} < {{ pgbouncer_min_version }}"  
  when: ansible_facts.packages['pgbouncer'][0].version is version(pgbouncer_min_version, '<')
  tags:
    - configure

- name: pgbouncer defaults (classic)
  template:
    src: pgbouncer-classic.defaults.j2
    dest: /etc/default/pgbouncer

- name: pgbouncer configuration (classic)
  template:
    src: pgbouncer-classic.ini.j2
    dest: /etc/pgbouncer/pgbouncer.ini

- name: pgbouncer gather state
  service_facts:
  tags:
    - configure

- name: pgbouncer systemd unit install
  template:
    src: pgbouncer-multiprocess@.service.j2
    dest: /etc/systemd/system/pgbouncer-multiprocess@.service
  notify:
   - Reload systemd
   - Restart pgbouncer
  tags:
   - configure

- name: pgbouncer kernel settings
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/99-commcare-cloud.conf
    reload: yes
  with_dict: "{{ pgbouncer_kernel_settings }}"

- name: pgbouncer number current processes
  set_fact:
    pgbouncer_current_processes: "{{ pgbouncer_current_processes | union([item.value.name | regex_search('pgbouncer-multiprocess\\@(\\d+)\\.service', '\\1') | first | int]) }}"
  loop: "{{ lookup('dict', ansible_facts.services) }}"
  when: item.key | regex_search('pgbouncer-multiprocess@(\d+)\.service')
  no_log: true
  tags:
    - configure

- name: pgbouncer clean up tasks for excess processes
  block:
    - name: pgbouncer stop and disable excess processes
      systemd:
        name: "pgbouncer-multiprocess@{{ item }}"
        state: stopped
        enabled: no
      with_sequence: start={{ pgbouncer_processes + 1 }} end={{ pgbouncer_current_processes | max if pgbouncer_current_processes | max > pgbouncer_processes else pgbouncer_processes + 1 }}
    - name: pgbouncer remove conf for excess processes
      file:
        path: "{{ pgbouncer_ini }}"
        state: absent
      with_sequence: start={{ pgbouncer_processes + 1 }} end={{ pgbouncer_current_processes | max if pgbouncer_current_processes | max > pgbouncer_processes else pgbouncer_processes + 1 }}
    - name: pgbouncer remove unix socket directory for excess processes
      file:
        path: "{{ pgbouncer_socket_dir }}"
        state: absent
      with_sequence: start={{ pgbouncer_processes + 1 }} end={{ pgbouncer_current_processes | max if pgbouncer_current_processes | max > pgbouncer_processes else pgbouncer_processes + 1 }}
  when: pgbouncer_current_processes | max > pgbouncer_processes
  tags:
    - configure

- name: pgbouncer create unix socket directory
  file:
    path: "{{ pgbouncer_socket_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '755'
  with_sequence: count={{ pgbouncer_processes }}
  tags:
    - configure

- name: pgbouncer tmpfiles configuration
  template:
    src: tmpfiles.postgresql-pgbouncer.conf.j2
    dest: /etc/tmpfiles.d/postgresql-pgbouncer.conf
  tags:
    - configure

- name: pgbouncer configuration
  template:
    src: pgbouncer.ini.j2
    dest: "{{ pgbouncer_ini }}"
  notify:
    - Start and enable pgbouncer
    - Reload pgbouncer
  with_sequence: count={{ pgbouncer_processes }}
  tags:
    - configure

- name: pgbouncer users
  template:
    src: pgbouncer.users.j2
    dest: "{{ pgbouncer_users }}"
  notify:
    - Start and enable pgbouncer
    - Reload pgbouncer
  tags:
    - configure

- name: pgbouncer monit config
  template:
    src: "monit.pgbouncer.j2"
    dest: "/etc/monit/conf.d/pgbouncer"
    group: root
    owner: root
    mode: 0640
  notify: reload monit
  tags: monit

- name: pgbounger stop and disable (classic) and make sure multiprocess is started
  shell: /bin/true
  changed_when: true
  notify:
    - Stop and disable pgbouncer (classic)
    - Start and enable pgbouncer
  tags:
    - configure

- meta: flush_handlers

- name: pgbouncer monit monitor
  monit:
    name: pgbouncer
    state: monitored
  ignore_errors: "{{ ansible_check_mode }}"
  register: result
  until: not result.failed or 'process not presently configured with monit' not in result.msg
  retries: 5
  delay: 20
  tags: monit

