---
- name: Set bash prompt in bash.bashrc
  become: yes
  lineinfile:
    dest: "/etc/bash.bashrc"
    regexp: "^PS1=.*"
    line: "PS1={{ bash_PS1 }}"
    state: present

- name: Set bash prompt in bashrc skeleton
  become: yes
  lineinfile:
    dest: "/etc/skel/.bashrc"
    regexp: "^PS1=.*"
    line: "PS1={{ bash_PS1 }}"
    state: present

- name: Add ansible group
  become: yes
  group:
    name: ansible
    state: present
    gid: "{{ ansible_gid }}"
  tags:
    - new_ansible_sudo_pass
  when: "ansible_gid is not none and 'update_users' not in ansible_run_tags"

- name: Add cchq group
  become: yes
  group:
    name: "{{ cchq_group }}"
    state: present
    gid: "{{ cchq_gid }}"
  tags: commcarehq
  when: "cchq_gid is not none and 'update_users' not in ansible_run_tags"

- name: Add dev group
  become: yes
  group:
    name: "{{ dev_group }}"
    state: present
  tags: commcarehq

- name: Add ansible user
  user:
    name: ansible
    state: present
    shell: /bin/bash
    group: "{{ 'ansible' if ansible_gid and 'update_users' not in ansible_run_tags else omit }}"
    groups: "sudo"
    password: "{{ new_ansible_sudo_pass|default(ansible_sudo_pass)|password_hash('sha512') }}"
    uid: "{{ ansible_uid if ansible_uid and 'update_users' not in ansible_run_tags else omit }}"
    append: yes
  tags:
    - new_ansible_sudo_pass

- name: Add cchq user
  become: yes
  user:
    name: "{{ cchq_user }}"
    state: present
    shell: /bin/bash
    group: "{{ cchq_group if cchq_gid and 'update_users' not in ansible_run_tags else omit }}"
    groups: "{{ dev_group }}"
    uid: "{{ cchq_uid if cchq_uid and 'update_users' not in ansible_run_tags else omit }}"
    append: yes
  tags: commcarehq

- name: Add users for current devs
  become: yes
  user:
    name: "{{ item }}"
    state: present
    shell: /bin/bash
    groups: "{{ dev_group }}"
  with_items: '{{ dev_users.present }}'

- name: Add public keys for current devs
  become: yes
  authorized_key:
    user: "{{ item }}"
    state: present
    key: "{{ lookup('file', authorized_keys_dir ~ item ~ '.pub') }}"
    exclusive: yes
  with_items: '{{ dev_users.present }}'
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - pubkey

- name: Remove public key for cchq user
  # todo: remove after applied to all envs
  become: yes
  authorized_key:
    user: "{{ cchq_user }}"
    key: ''
    state: present
    exclusive: yes
  tags: commcarehq

- name: lookup ssh pubkeys from authorized_keys_dir and create ssh_pubkeys_list
  set_fact:
    ssh_pubkeys_list: "{{ lookup('file', authorized_keys_dir ~ item ~ '.pub') }}"
  with_items:
    "{{ dev_users.present }}"
  register: ssh_pubkeys_results_list
  tags:
    - pubkey

- name: iterate over ssh_pubkeys_list and join into a string
  set_fact:
    ssh_pubkeys_string: "{{ ssh_pubkeys_results_list.results | map(attribute='ansible_facts.ssh_pubkeys_list') | list | join('\n') }}"
  tags:
    - pubkey

- name: "Verifying ssh_user key in the ssh_pubkeys_string list"
  assert:
    that:
      - 'lookup("file", authorized_keys_dir ~ ssh_user ~ ".pub") in ssh_pubkeys_string'
  when: (ssh_user)
  tags:
    - validate_key
    - pubkey

- name: Authorize current devs to login as ansible
  become: yes
  authorized_key:
    user: ansible
    state: present
    key: "{{ ssh_pubkeys_string }}"
    exclusive: yes
  tags:
    - pubkey

- import_tasks: remove_users.yml
  when: dev_users.absent

- name: check users password valid time
  become: yes
  shell: getent shadow "{{ item }}" | cut -d':' -f5
  register: users_pw_valid
  loop: "{{ dev_users.present }} + ['ansible', '{{ cchq_user }}']"
  changed_when: False

- name: clear users password valid time
  become: yes
  shell: chage -M -1 "{{ item['item'] }}"
  loop: "{{ users_pw_valid.results }}"
  when: item.stdout is defined and item.stdout != ''


# This must be the last task in the file
# It disables factory auth (e.g. root user with password login)
# and this role has to be able to finish entirely using factory auth (to bootstrap the users)
- name: Copy sudoers file
  become: yes
  template:
    src: sudoers.j2
    dest: /etc/sudoers.d/cchq
    validate: 'visudo -cf %s'
    owner: root
    group: root
    mode: 0440
  tags:
    - sudoers
