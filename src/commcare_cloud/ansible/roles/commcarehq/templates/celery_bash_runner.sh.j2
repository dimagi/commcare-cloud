# Catch any TERM or INT signals and propagate
# to the Celery process. Upon catching of the signal
# the 'wait' command below will terminate and thus will
# exit the bash process.
#
# > When Bash is waiting for an asynchronous command via the wait
# > built-in, the reception of a signal for which a trap has
# > been set will cause the wait built-in to return immediately
# > with an exit status greater than 128, immediately after which
# > the trap is executed.
#
# See Section 12.2.2 of http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html
#
# Effectively we've orphaned
# the Celery process to do a warm shutdown and we are
# free to start another bash process under supervisor.
trap 'echo "Killing: celery@${HOSTNAME} - $PID";
    {{ virtualenv_home }}/bin/python {{ code_home }}/manage.py shutdown_celery_worker_by_hostname celery@${HOSTNAME};
    echo "Killed: $PID";' TERM INT

HOSTNAME_ARG=""
ARGS=""
for i in "$@"
do
    case $i in
        # Note this pattern will break if we use --hostname <hostname> (no = sign)
        # because $@ space separates arguments
        --hostname=*|-n=*)
        HOSTNAME_ARG="$1"
        shift 1
        ;;
        *)  # Default case
        ARGS+=" $1"
        shift 1
        ;;
esac
done

TIMESTAMP=`date +%s`
HOSTNAME_ARG+=".${TIMESTAMP}_timestamp"
# Replaces the = sign with space and then coerces into an array that is space separated
# Example:
# --hostname=myhost -> [hostname, myhost]
HOSTNAME_PARTS=(${HOSTNAME_ARG//=/ })
HOSTNAME=${HOSTNAME_PARTS[1]}

{{ virtualenv_home }}/bin/celery -A corehq worker ${HOSTNAME_ARG} ${ARGS}  &
PID=$!
BASH_PID=$$
echo "Started ${HOSTNAME} on PID: ${PID}"
wait $PID
echo "Exiting Bash Process: ${BASH_PID}"
