#
# {{ ansible_managed }}
#

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from datetime import time
import hashlib
import json
import os
import sys

from celery.schedules import crontab

_ROOT_DIR  = os.path.dirname(os.path.abspath(__file__))

ALLOWED_HOSTS = {{ (localsettings.ALLOWED_HOSTS|default([]) + ALTERNATE_HOSTS + [SITE_HOST, 'localhost', '127.0.0.1'] + groups.proxy + groups.proxy | map('extract', hostvars, 'ansible_host') | map('default', 'localhost') | list + groups.proxy | map('extract', hostvars, 'public_ip') | map('default', 'localhost') | list) | unique | to_json }}

{% if SEPARATE_SYNCLOGS_DB %}
SYNCLOGS_SQL_DB_ALIAS = "synclogs"
{% else %}
SYNCLOGS_SQL_DB_ALIAS = "default"
{% endif %}

DATABASES = { {% for config in postgresql_dbs.all %}
{%- if config.django_alias %}
    '{{config.django_alias}}': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ config.name }}',
        'USER': '{{ config.user }}',
        'PASSWORD': '{{ config.password }}',
        'HOST': '{% if config.pgbouncer_host == inventory_hostname %}127.0.0.1{% else %}{{ config.pgbouncer_host }}{% endif %}',
        'PORT': {{ config.port }},
        'OPTIONS': {{ config.options|to_json }},
        'DISABLE_SERVER_SIDE_CURSORS': True,
        {% if not config.django_migrate -%}
        'MIGRATE': False,
        {% endif -%}
        {% if config.get('master') -%}
        'STANDBY': {
            'MASTER': '{{ config.master }}',
            'ACCEPTABLE_REPLICATION_DELAY': {{ config.acceptable_replication_delay }},
        }
    {% endif -%}
        {% if postgresql_dbs.form_processing and config.get('shards') -%}
        'PLPROXY': {
            'SHARDS': {{config.shards|to_json}},
        }
    {% elif postgresql_dbs.form_processing and config.name == postgresql_dbs.form_processing.proxy.name -%}
        'PLPROXY': {
            'PROXY': True,
        }
    {% elif postgresql_dbs.form_processing and config.name == postgresql_dbs.form_processing.proxy_standby.name -%}
        'PLPROXY': {
            'PROXY_FOR_STANDBYS': True,
        }
    {% endif -%}
    },
{% endif -%}
{% endfor %}
}

USE_PARTITIONED_DATABASE = {{ SEPARATE_FORM_PROCESSING_DBS }}

REPORTING_DATABASES = json.loads('{{ REPORTING_DATABASES|to_json }}')

LOAD_BALANCED_APPS = json.loads('{{ LOAD_BALANCED_APPS|to_json|default({}) }}')

LOG_HOME = '{{ log_home }}'
COUCH_LOG_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-commcarehq.couch.log")
DJANGO_LOG_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-commcarehq.django.log")
ACCOUNTING_LOG_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-commcarehq.accounting.log")
ANALYTICS_LOG_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-commcarehq.analytics.log")
DATADOG_LOG_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-commcarehq.datadog.log")
EXPORT_MIGRATION_LOG_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-export_migration.log")
UCR_TIMING_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-ucr_timing.log")
UCR_DIFF_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-ucr_diff.log")
UCR_EXCEPTION_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-ucr_exception.log")
MAIN_COUCH_SQL_DATAMIGRATION = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-couch_sql_migration.log")
SESSION_ACCESS_LOG_FILE = os.path.join(LOG_HOME,"{{ localsettings.DEPLOY_MACHINE_NAME }}-session_access_log.log")

# Shared Drive Setup
{% if shared_drive_enabled %}
SHARED_DRIVE_ROOT = '{{ shared_mount_dir }}'
{% else %}
SHARED_DRIVE_ROOT = '{{ shared_data_dir }}'
{% endif %}
RESTORE_PAYLOAD_DIR_NAME = '{{ restore_payload_dir_name }}'
TRANSFER_FILE_DIR_NAME = '{{ transfer_payload_dir_name }}'
SHARED_TEMP_DIR_NAME = '{{ shared_temp_dir_name }}'
TRANSFER_SERVER = 'nginx'


# Email setup
# email settings: these ones are the custom hq ones
{% if not EMAIL_LOGIN %}
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = '/tmp/django_email'
{% else %}
EMAIL_LOGIN = "{{ EMAIL_LOGIN }}"
{% if EMAIL_PASSWORD %}
EMAIL_PASSWORD = "{{ EMAIL_PASSWORD }}"
{% else %}
# This prevents django from attempting smtp auth for servers where it is not configured
EMAIL_PASSWORD = None
{% endif %}
EMAIL_SMTP_HOST = "{{ localsettings.EMAIL_SMTP_HOST }}"
EMAIL_SMTP_PORT = {{ localsettings.EMAIL_SMTP_PORT }}
{% endif %}
{% if not localsettings.EMAIL_SMTP_HOST %}
EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'
{% endif %}

RETURN_PATH_EMAIL_PASSWORD = '{{ RETURN_PATH_EMAIL_PASSWORD }}'

EMAIL_SUBJECT_PREFIX = '[{{ env_monitoring_id }}] '

ENABLE_SOFT_ASSERT_EMAILS = {{ localsettings.ENABLE_SOFT_ASSERT_EMAILS|default(False) }}
IS_DIMAGI_ENVIRONMENT = {{ localsettings.IS_DIMAGI_ENVIRONMENT|default(False) }}

SERVER_ENVIRONMENT = '{{ env_monitoring_id }}'

XFORMS_FORM_TRANSLATE_JAR = os.path.join(_ROOT_DIR, "lib", "form_translate.jar")

#COUCH SETUP
COUCH_DATABASES = {
{% for alias, config in couch_dbs.items() %}
    '{{ alias }}': {
        'COUCH_HTTPS': {{ config.is_https }},
        'COUCH_SERVER_ROOT': '{{ config.host }}:{{ config.port }}',
        'COUCH_USERNAME': '{{ config.username }}',
        'COUCH_PASSWORD': '{{ config.password }}',
        'COUCH_DATABASE_NAME': '{{ config.name }}',
    },
{% endfor %}
}

{% if 'CUSTOM_SYNCLOGS_DB' in localsettings %}
CUSTOM_SYNCLOGS_DB = '{{ localsettings.CUSTOM_SYNCLOGS_DB }}'
{% endif %}

{% if 'BIGCOUCH' in localsettings %}
BIGCOUCH = '{{ localsettings.BIGCOUCH }}'
{% endif %}

{% if 'BIGCOUCH_QUORUM_COUNT' in localsettings %}
BIGCOUCH_QUORUM_COUNT = '{{ localsettings.BIGCOUCH_QUORUM_COUNT }}'
{% endif %}

{% if 'COUCH_CACHE_DOCS' in localsettings %}
COUCH_CACHE_DOCS = '{{ localsettings.COUCH_CACHE_DOCS }}'
{% endif %}
{% if 'COUCH_CACHE_VIEWS' in localsettings %}
COUCH_CACHE_VIEWS = '{{ localsettings.COUCH_CACHE_VIEWS }}'
{% endif %}
{% if 'COUCH_REINDEX_SCHEDULE' in localsettings %}
COUCH_REINDEX_SCHEDULE = {{ localsettings.COUCH_REINDEX_SCHEDULE }}
{% endif %}

{% if 'STAGING_DOMAINS' in localsettings %}
STAGING_DOMAINS = {{ localsettings.STAGING_DOMAINS }}
{% endif %}

{% if DROPBOX_APP_NAME and DROPBOX_KEY %}
DROPBOX_APP_NAME = '{{ DROPBOX_APP_NAME }}'
{% endif %}

{% if DROPBOX_KEY %}
DROPBOX_KEY = '{{ DROPBOX_KEY }}'
{% endif %}

{% if DROPBOX_SECRET %}
DROPBOX_SECRET = '{{ DROPBOX_SECRET }}'
{% endif %}

{% if AMAZON_S3_ACCESS_KEY %}
S3_ACCESS_KEY = '{{ AMAZON_S3_ACCESS_KEY }}'
{% endif %}
{% if AMAZON_S3_SECRET_KEY %}
S3_SECRET_KEY = '{{ AMAZON_S3_SECRET_KEY }}'
{% endif %}

{% if s3_blob_db_enabled %}
S3_BLOB_DB_SETTINGS = {
    'url': '{{ s3_blob_db_url }}',
    'access_key': '{{ s3_blob_db_access_key }}',
    'secret_key': '{{ s3_blob_db_secret_key }}',
    's3_bucket': '{{ s3_blob_db_s3_bucket }}',
    'bulk_delete_chunksize': {{ s3_bulk_delete_chunksize }},
    'config': {'signature_version': '{{ s3_signature_version|default("s3") }}'},
}
{% if localsettings.get('BLOB_DB_MIGRATING_FROM_S3_TO_S3', False) %}
OLD_S3_BLOB_DB_SETTINGS = {
    'url': '{{ old_s3_blob_db_url }}',
    'access_key': '{{ old_s3_blob_db_access_key }}',
    'secret_key': '{{ old_s3_blob_db_secret_key }}',
    's3_bucket': '{{ old_s3_blob_db_s3_bucket }}',
    'bulk_delete_chunksize': {{ old_s3_bulk_delete_chunksize }},
    'config': {'signature_version': 's3'},
}
BLOB_DB_MIGRATING_FROM_S3_TO_S3 = {{ localsettings.BLOB_DB_MIGRATING_FROM_S3_TO_S3 }}
{% endif %}
{% if 'BLOB_DB_MIGRATING_FROM_FS_TO_S3' in localsettings %}
BLOB_DB_MIGRATING_FROM_FS_TO_S3 = {{ localsettings.BLOB_DB_MIGRATING_FROM_FS_TO_S3 }}
{% endif %}
{% endif %}{# s3_blob_db_enabled #}

{% if MOBILE_INTEGRATION_TEST_TOKEN %}
MOBILE_INTEGRATION_TEST_TOKEN = '{{ MOBILE_INTEGRATION_TEST_TOKEN }}'
{% endif %}

####### For Constructing Global URLs ########

LOCAL_APPS = (
    'dimagi.utils',
    'gunicorn',
    {% for entry in LOCAL_APPS %}
    {% if inventory_hostname in groups[entry.host] %}
    '{{ entry.name }}',
    {% endif %}
    {% endfor %}
)
{% if 'DATADOG_TRACE' in localsettings %}
DATADOG_TRACE = json.loads('{{ localsettings.DATADOG_TRACE|to_json }}')
{% endif %}

{% if 'LOCAL_PILLOWS' in localsettings %}
LOCAL_PILLOWTOPS = {
{% for group, pillows in localsettings.LOCAL_PILLOWS.items() %}
    "{{ group }}": [
{% for pillow in pillows %}
        {
            "name": "{{ pillow.name }}",
            "class": "{{ pillow.class }}",
            "instance": "{{ pillow.instance }}",
{% if pillow.params is defined %}
            "params": json.loads('{{ pillow.params|to_json }}')
{% endif %}
        },
{% endfor %}
    ]
{% endfor %}
}
{% endif %}

{% if 'RUN_FORM_META_PILLOW' in localsettings %}
RUN_FORM_META_PILLOW = {{ localsettings.RUN_FORM_META_PILLOW }}
{% endif %}
{% if 'RUN_CASE_SEARCH_PILLOW' in localsettings %}
RUN_CASE_SEARCH_PILLOW = {{ localsettings.RUN_CASE_SEARCH_PILLOW }}
{% endif %}
{% if 'RUN_UNKNOWN_USER_PILLOW' in localsettings %}
RUN_UNKNOWN_USER_PILLOW = {{ localsettings.RUN_UNKNOWN_USER_PILLOW }}
{% endif %}

{% if 'CASE_ES_DROP_FORM_FIELDS' in localsettings %}
CASE_ES_DROP_FORM_FIELDS = {{ localsettings.CASE_ES_DROP_FORM_FIELDS }}
{% endif %}

BITLY_LOGIN = '{{ BITLY_LOGIN }}'
BITLY_APIKEY = '{{ BITLY_APIKEY }}'

JAR_SIGN = dict(
    key_store = os.path.join('{{ www_dir }}', "DimagiKeyStore"),
    key_alias = "{{ JAR_KEY_ALIAS }}",
    store_pass = "{{ JAR_STORE_PASS }}",
    key_pass = "{{ JAR_KEY_PASS }}",
)

#xep
#GET_URL_BASE  = 'dimagi.utils.web.get_secure_url_base'
REFLEXIVE_URL_BASE = "https://localhost:8001"
def get_url_base():
    return REFLEXIVE_URL_BASE
GET_URL_BASE  = 'settings.get_url_base'
EDITOR_URL = 'http://localhost:8011/xep/initiate/'


{% if 'ICDS_DOMAIN' in localsettings %}
ICDS_SMS_INDICATOR_DOMAINS = ['{{ localsettings.ICDS_DOMAIN }}']
{% endif %}

{% if 'USER_REPORTING_METADATA_UPDATE_FREQUENCY_HOURS' in localsettings %}
USER_REPORTING_METADATA_UPDATE_FREQUENCY = {{ localsettings.USER_REPORTING_METADATA_UPDATE_FREQUENCY_HOURS }} * 60
{% endif %}
{% if 'USER_REPORTING_METADATA_BATCH_ENABLED' in localsettings %}
USER_REPORTING_METADATA_BATCH_ENABLED = {{ localsettings.USER_REPORTING_METADATA_BATCH_ENABLED }}
{% endif %}
{% if 'USER_REPORTING_METADATA_BATCH_SCHEDULE' in localsettings %}
USER_REPORTING_METADATA_BATCH_SCHEDULE = {{ localsettings.USER_REPORTING_METADATA_BATCH_SCHEDULE }}
{% endif %}

SMS_QUEUE_ENABLED = {{localsettings.get('SMS_QUEUE_ENABLED', False)}}
REMINDERS_QUEUE_ENABLED = {{localsettings.get('REMINDERS_QUEUE_ENABLED', False)}}

PILLOW_RETRY_QUEUE_ENABLED = True


SMS_BACKENDS = {
    "1" : "MOBILE_BACKEND_TROPO_US",
    "265" : "MOBILE_BACKEND_TROPO_CANADIAN",
}

{% if 'SYNC_CASE_FOR_MESSAGING_ON_SAVE' in localsettings %}
SYNC_CASE_FOR_MESSAGING_ON_SAVE = {{ localsettings.SYNC_CASE_FOR_MESSAGING_ON_SAVE }}
{% endif %}

{% if 'MEDIA_ROOT' in localsettings and localsettings.MEDIA_ROOT %}
MEDIA_ROOT = '{{ localsettings.MEDIA_ROOT }}'
{% else %}
MEDIA_ROOT = os.path.join(_ROOT_DIR,'mediafiles') #media for user uploaded media.  in general this won't be used at all.
{% endif %}
{% if 'STATIC_ROOT' in localsettings and localsettings.STATIC_ROOT %}
STATIC_ROOT = '{{ localsettings.STATIC_ROOT }}'
{% else %}
STATIC_ROOT = os.path.join(_ROOT_DIR,'staticfiles')
{% endif %}
{% if 'STATIC_CDN' in localsettings %}
STATIC_CDN = '{{ localsettings.STATIC_CDN }}'
{% endif %}
DEBUG = False
TEMPLATE_DEBUG = DEBUG
LESS_DEBUG = DEBUG

ADMINS = (('HQ Dev Team', '{{ server_admin_email }}'),)
SEND_BROKEN_LINK_EMAILS = True

OVERRIDE_LOCATION = "https://www.commcarehq.org"
DEFAULT_PROTOCOL = "https"
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')

ANALYTICS_IDS = {
    'GOOGLE_ANALYTICS_API_ID': '{{ GOOGLE_ANALYTICS_API_ID }}',
    'HUBSPOT_API_ID': '{{ HUBSPOT_API_ID }}',
    'HUBSPOT_API_KEY': '{{ HUBSPOT_API_KEY }}',
    'KISSMETRICS_KEY': '{{ KISSMETRICS_KEY }}',
    'FULLSTORY_ID': '{{ FULLSTORY_ID }}',
    'DRIFT_ID': '{{ DRIFT_ID }}',
    'APPCUES_ID': '{{ APPCUES_ID }}',
    'APPCUES_KEY': '{{ APPCUES_KEY }}'
}

ANALYTICS_CONFIG = {
    'HQ_INSTANCE': '{{ localsettings.HQ_INSTANCE }}',
    'DEBUG': {{ localsettings.ANALYTICS_DEBUG|default(False) }},
    'LOG_LEVEL': '{{ localsettings.ANALYTICS_LOG_LEVEL|default('') }}',
}

EULA_COMPLIANCE = {{ localsettings.EULA_COMPLIANCE|default(False) }}

AXES_LOCK_OUT_AT_FAILURE = False

BUG_REPORT_RECIPIENTS = ['commcarehq-support@dimagi.com']
NEW_DOMAIN_RECIPIENTS = ['inquiries@dimagi.com']
EXCHANGE_NOTIFICATION_RECIPIENTS = ["exchange@dimagi.com"]

CUSTOM_REPORT_MAP = {
    "pathfinder": [
        'pathfinder.models.PathfinderHBCReport',
        'pathfinder.models.PathfinderProviderReport',
        'pathfinder.models.PathfinderWardSummaryReport',
    ]
}

CELERY_FLOWER_URL = '{{ CELERY_FLOWER_URL }}'
{% if 'CELERY_TIMEZONE' in localsettings and localsettings.CELERY_TIMEZONE %}
CELERY_TIMEZONE = '{{ localsettings.CELERY_TIMEZONE }}'
{% endif %}

PREVIEWER_RE = r'^(.*@dimagi\.com|.*@valuelabs\.in)$'
GMAPS_API_KEY = '{{ GMAPS_API_KEY }}'
FORMTRANSLATE_TIMEOUT = 5

CELERY_BROKER_URL = BROKER_URL = '{{ BROKER_URL }}'
CELERY_HEARTBEAT_THRESHOLDS = {
{% for queue, threshold in CELERY_HEARTBEAT_THRESHOLDS.items() | sort %}
    {{ queue | to_json }}: {% if threshold == None %}None{% else %}{{ threshold | to_json }}{% endif %},
{% endfor %}
}

FORMPLAYER_URL = "/formplayer"

{% if FORMPLAYER_INTERNAL_AUTH_KEY %}
FORMPLAYER_INTERNAL_AUTH_KEY = "{{ FORMPLAYER_INTERNAL_AUTH_KEY }}"
{% endif %}

SOIL_BACKEND = "soil.CachedDownload"
SOIL_DEFAULT_CACHE = "redis"

REPORT_CACHE = 'redis'


redis_cache = {
    'BACKEND': 'django_redis.cache.RedisCache',
{% if 'REDIS_DB' in localsettings %}
    'LOCATION': 'redis://{{ localsettings.REDIS_HOST }}:{{ localsettings.REDIS_PORT }}/{{ localsettings.REDIS_DB }}',
{% else %}
    'LOCATION': 'redis://{{ localsettings.REDIS_HOST }}:{{ localsettings.REDIS_PORT }}',
{% endif %}
    'OPTIONS': {
        'PARSER_CLASS': 'redis.connection.HiredisParser',
        'PICKLE_VERSION': 2,  # After PY3 migration: remove
{% if is_redis_cluster %}
        'REDIS_CLIENT_CLASS': 'rediscluster.RedisCluster',
        'CONNECTION_POOL_CLASS': 'rediscluster.connection.ClusterConnectionPool',
        'CONNECTION_POOL_KWARGS': {
            'skip_full_coverage_check': True
        },
{% endif %}
    },
}

CACHES = {
    'default': redis_cache,
    'redis': redis_cache,
}

ELASTICSEARCH_HOSTS = [
    {% for es_host in groups.elasticsearch -%}
    '{{ es_host }}',
    {% endfor -%}
]
ELASTICSEARCH_PORT = {{ ELASTICSEARCH_PORT }}

####### setting Elasticsearch major version #####
{% if 'ELASTICSEARCH_MAJOR_VERSION' in localsettings %}
ELASTICSEARCH_MAJOR_VERSION = {{ localsettings.ELASTICSEARCH_MAJOR_VERSION }}
{% else %}
ELASTICSEARCH_MAJOR_VERSION = 1
{% endif %}

ES_SETTINGS = {{ ES_SETTINGS }}

SECRET_KEY = "{{ SECRET_KEY }}"

PRIME_VIEWS_INTERVAL = 2

####### PACT SPECIAL SETTINGS

PACT_HP_GROUP_ID = "ee042f33c890421794f69ed81e030882"
PACT_URL = 'http://localhost:8001/'
PACT_CHWS = {
    'ao970': 'chw',
    'asc30': 'both',
    'cs783': 'chw',
    'gj093': 'chw',
    'ma651': 'chw',
    'ss192': 'chw',
    'ss524': 'chw',
    'jzb89': 'chw', #no profile
    'ctsims': 'chw', #no profile
    'rachel': 'both', #no profile


    'clare': 'chw-inactive',

    'isaac': 'chw-inactive',
    'ink': 'chw-inactive',

    'zmt0': 'chw-inactive',
    'ral42': 'chw-inactive',
    'ac381': 'chw-inactive',
    'an907': 'chw-inactive',
    'lm723': 'chw-inactive',
    'lnb9': 'chw-inactive',
    'nc903': 'chw-inactive',
    'rsb25': 'chw-inactive',
    'lmg68': 'chw-inactive',
    'godfrey': 'chw-inactive',
#    'ayesha': 'chw-inactive',
}

INTERNAL_DATA = {
    "business_unit": ["Inc", "DSI", "DSA", "DMoz"],
    "product": ["CommCare", "CommConnect", "CommTrack", "RapidSMS", "Custom"],
    "services": ["Basic", "Plus", "Full", "Custom", "Active Data Management", "Daily Contract", "Call Center"],
    "account_types": [	"Academic", "Alliance", "Competitor", "Funder", "Implementer - Local", "Implementer - Multinational",
                          "Investor", "Networking", "Other", "Partner", "Pharmaceutical", "Reseller", "Technology"],
    "initiatives": ["CORE Group POC", "DIV 1 POC", "DIV 2 POC", "Senegal POC", "Workshop", "Partner Program Sandbox"],
    "contract_type": ["FFP", "T&M", "Cost Plus"],
    "area": [
        {
            'name': 'Logistics',
            'sub_areas': ['Commodity Tracking/Procurement', 'Human Resources']
        },
        {
            'name': 'Financial Services for the Poor',
            'sub_areas': ['Conditional Cash Transfer', 'Financial Services to the Poor', 'Mobile Banking']
        },
        {
            'name': 'Water, Sanitation, & Hygiene',
            'sub_areas': ['Water, Sanitation, & Hygiene']},
        {
            'name': 'Agriculture and Food Security',
            'sub_areas': ['Agriculture', 'Food Security']},
        {
            'name': 'Economic Development',
            'sub_areas': ['Rural Development', 'Urban Development', 'Safety & Security']
        },
        {
            'name': 'Emergency Response',
            'sub_areas': ['Emergency Response']
        },
        {
            'name': 'Education and Training',
            'sub_areas': ['Adult Training', 'Child Education', 'Early Childhood Development']
        },
        {
            'name': 'Other',
            'sub_areas': ['Environment', 'Orphans and Vulnerable Children', 'Telecommunications']
        },
        {
            'name': "Gender Equality and Women's Empowerment",
            'sub_areas': ['Gender Services', 'Sex Workers']
        },
        {
            'name': 'Health',
            'sub_areas': ['Cardiac Diseases', 'Care coordination', 'Cervical Cancer', 'Diagnostics', 'Diarrhea',
                          'Family Planning', 'HIV/AIDS', 'Infectious Diseases', 'Informatics', 'Malaria',
                          'Maternal, Newborn, & Child Health', 'Medication adherence', 'Mental Health',
                          'Neglected Tropical Diseases', 'Non-Communicable Diseases', 'Nutrition', 'Other', 'Polio',
                          'Primary Care', 'Respiratory Diseases', 'Surgery', 'Surveillance', 'Telemedicine',
                          'Tuberculosis', 'Vaccinations']
        },
        {
            'name': 'Governance and Accountability',
            'sub_areas': ['Governence', 'Social Accountability']
        }
    ],
    "country": ["Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua & Deps", "Argentina", "Armenia",
                "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus",
                "Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia Herzegovina", "Botswana", "Brazil",
                "Brunei", "Bulgaria", "Burkina", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde",
                "Central African Rep", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo",
                "Congo {Democratic Rep}", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark",
                "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador",
                "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia",
                "Georgia", "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana",
                "Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland {Republic}",
                "Israel", "Italy", "Ivory Coast", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati",
                "Korea North", "Korea South", "Kosovo", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho",
                "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Madagascar", "Malawi",
                "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico",
                "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar, {Burma}",
                "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Norway",
                "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland",
                "Portugal", "Qatar", "Romania", "Russian Federation", "Rwanda", "St Kitts & Nevis", "St Lucia",
                "Saint Vincent & the Grenadines", "Samoa", "San Marino", "Sao Tome & Principe", "Saudi Arabia",
                "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia",
                "Solomon Islands", "Somalia", "South Africa", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname",
                "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Togo",
                "Tonga", "Trinidad & Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine",
                "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu",
                "Vatican City", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"]
}

COUCH_STALE_QUERY = 'update_after'

API_THROTTLE_REQUESTS = 5
API_THROTTLE_TIMEFRAME = 10

{% if 'SAVED_EXPORT_ACCESS_CUTOFF' in localsettings %}
SAVED_EXPORT_ACCESS_CUTOFF = {{ localsettings.SAVED_EXPORT_ACCESS_CUTOFF }}
{% endif %}

{% if MAPS_LAYERS %}
MAPS_LAYERS = json.loads('{{ MAPS_LAYERS|to_json }}')
{% endif %}

{% if 'PILLOWTOP_MACHINE_ID' in localsettings and localsettings.PILLOWTOP_MACHINE_ID %}
PILLOWTOP_MACHINE_ID = '{{ localsettings.PILLOWTOP_MACHINE_ID }}'
{% endif %}

ACTIVE_PILLOW_NAMES = list(set([
{% for _, pillows in app_processes_config.pillows.items() %}
    {% for pillow_name in pillows.keys()|unique %}
        "{{ pillow_name }}",
    {% endfor %}
{% endfor %}
]))

{% if SIMPLE_API_KEYS %}
SIMPLE_API_KEYS = {{ SIMPLE_API_KEYS|to_json }}
{% endif %}

{% if groups.kafka %}
KAFKA_BROKERS = [
    {%- for host in groups.kafka -%}
    '{{ host }}:9092',
    {%- endfor -%}
]
{% endif %}

INVOICE_TERMS = "Net 30"

{% if BOOKKEEPER_CONTACT_EMAILS %}
BOOKKEEPER_CONTACT_EMAILS = {{ BOOKKEEPER_CONTACT_EMAILS|to_json }}
{% endif %}

{% if localsettings.get('INVOICE_STARTING_NUMBER') %}
INVOICE_STARTING_NUMBER = {{ localsettings.INVOICE_STARTING_NUMBER }}
{% endif %}

{% if localsettings.get('INVOICE_PREFIX') %}
INVOICE_PREFIX = '{{ localsettings.INVOICE_PREFIX }}'
{% endif %}

{% if localsettings.get('INVOICE_FROM_ADDRESS') %}
INVOICE_FROM_ADDRESS = {{ localsettings.INVOICE_FROM_ADDRESS|to_json }}
{% endif %}

{% if localsettings.get('BANK_ADDRESS') %}
BANK_ADDRESS = {{ localsettings.BANK_ADDRESS|to_json }}
{% endif %}

{% if localsettings.get('BANK_NAME') %}
BANK_NAME = '{{ localsettings.BANK_NAME }}'
{% endif %}

{% if BANK_ACCOUNT_NUMBER %}
BANK_ACCOUNT_NUMBER = '{{ BANK_ACCOUNT_NUMBER }}'
{% endif %}

{% if localsettings.get('BANK_SWIFT_CODE') %}
BANK_SWIFT_CODE = '{{ localsettings.BANK_SWIFT_CODE }}'
{% endif %}

{% if OPEN_EXCHANGE_RATES_API_ID %}
OPEN_EXCHANGE_RATES_API_ID = '{{ OPEN_EXCHANGE_RATES_API_ID }}'
{% endif %}

{% if STRIPE_PRIVATE_KEY %}
STRIPE_PRIVATE_KEY = '{{ STRIPE_PRIVATE_KEY }}'
{% endif %}

{% if STRIPE_PUBLIC_KEY %}
STRIPE_PUBLIC_KEY = '{{ STRIPE_PUBLIC_KEY }}'
{% endif %}

COMPRESS_OFFLINE = True

{% if localsettings.get('ES_QUERY_CHUNKSIZE') %}
ES_QUERY_CHUNKSIZE = '{{ localsettings.ES_QUERY_CHUNKSIZE }}'
{% endif %}

{% if localsettings.get('SMS_PREFIXES_BY_COUNTRY') %}
SMS_PREFIXES_BY_COUNTRY = '{{ localsettings.SMS_PREFIXES_BY_COUNTRY }}'
{% endif %}

{% if localsettings.get('INACTIVITY_TIMEOUT') %}
INACTIVITY_TIMEOUT = {{ localsettings.INACTIVITY_TIMEOUT }}
{% endif %}

# Set to something like "192.168.1.5:8000" (with your IP address).
# See corehq/apps/builds/README.md for more information.
BASE_ADDRESS = '{{ SITE_HOST }}'

{% if localsettings.get('J2ME_ADDRESS') %}
J2ME_ADDRESS = '{{ localsettings.J2ME_ADDRESS }}'
{% endif %}

CLOUDCARE_BASE_URL = '{{ localsettings.get('CLOUDCARE_BASE_URL', '') }}'

EMAIL_USE_TLS = {{ localsettings.EMAIL_USE_TLS }}

BANK_ROUTING_NUMBER_ACH = '{{ BANK_ROUTING_NUMBER_ACH }}'
BANK_ROUTING_NUMBER_WIRE = '{{ BANK_ROUTING_NUMBER_WIRE }}'

ENABLE_PRELOGIN_SITE = {{ localsettings.get('ENABLE_PRELOGIN_SITE', True) }}

{% if localsettings.get('ENABLE_DRACONIAN_SECURITY_FEATURES') %}
ENABLE_DRACONIAN_SECURITY_FEATURES = True
{% endif %}

{% if supervisor_http_enabled|default(false) %}
SUPERVISOR_RPC_ENABLED = True
SUPERVISOR_USERNAME = '{{ supervisor_http_username }}'
SUPERVISOR_PASSWORD = '{{ supervisor_http_password }}'
{% endif %}

{% if HQ_PRIVATE_KEY %}
HQ_PRIVATE_KEY = \
{{ HQ_PRIVATE_KEY }}
{% endif %}

{% if DATADOG_ENABLED|default(false) %}
DATADOG_API_KEY = '{{ DATADOG_API_KEY }}'
DATADOG_APP_KEY = '{{ DATADOG_APP_KEY }}'
{% endif %}

{% if localsettings.get('WS4REDIS_CONNECTION_HOST') %}
WS4REDIS_CONNECTION = {
    'host': '{{ localsettings.WS4REDIS_CONNECTION_HOST }}'
}
{% endif %}

{% if TWO_FACTOR_GATEWAY_ENABLED %}
TWO_FACTOR_SMS_GATEWAY = 'corehq.apps.hqwebapp.two_factor_gateways.Gateway'
TWO_FACTOR_CALL_GATEWAY = 'corehq.apps.hqwebapp.two_factor_gateways.Gateway'
{% endif %}

{% if 'ENFORCE_TWO_FACTOR_FOR_SUPERUSERS' in localsettings %}
ENFORCE_TWO_FACTOR_FOR_SUPERUSERS = {{ localsettings.ENFORCE_TWO_FACTOR_FOR_SUPERUSERS }}
{% endif %}

{% if localsettings.get('CUSTOM_LANDING_TEMPLATE') and localsettings.CUSTOM_LANDING_TEMPLATE is not mapping %}
CUSTOM_LANDING_TEMPLATE = '{{ localsettings.CUSTOM_LANDING_TEMPLATE }}'
{% elif localsettings.get('CUSTOM_LANDING_TEMPLATE') %}
CUSTOM_LANDING_TEMPLATE = {
{% for hostname, template in localsettings.CUSTOM_LANDING_TEMPLATE.items() %}
    '{{ hostname }}': '{{ template }}',
{% endfor %}
}
{% endif %}

{% if localsettings.get('ENTERPRISE_MODE') %}
ENTERPRISE_MODE = {{ localsettings.ENTERPRISE_MODE }}
{% endif %}

{% if localsettings.get('RESTRICT_DOMAIN_CREATION') %}
RESTRICT_DOMAIN_CREATION = {{ localsettings.RESTRICT_DOMAIN_CREATION }}
{% endif %}

{% if localsettings.get('TABLEAU_URL_ROOT') %}
TABLEAU_URL_ROOT = '{{ localsettings.TABLEAU_URL_ROOT }}'
{% endif %}

{% if localsettings.get('COMMCARE_HQ_NAME') and localsettings.COMMCARE_HQ_NAME is not mapping %}
COMMCARE_HQ_NAME = '{{ localsettings.COMMCARE_HQ_NAME }}'
{% elif localsettings.get('COMMCARE_HQ_NAME') %}
COMMCARE_HQ_NAME = {
{% for hostname, commcare_hq_name in localsettings.COMMCARE_HQ_NAME.items() %}
    '{{ hostname }}': '{{ commcare_hq_name }}',
{% endfor %}
}
{% endif %}

{% if localsettings.get('COMMCARE_NAME') and localsettings.COMMCARE_NAME is not mapping %}
COMMCARE_NAME = '{{ localsettings.COMMCARE_NAME }}'
{% elif localsettings.get('COMMCARE_NAME') %}
COMMCARE_NAME = {
{% for hostname, commcare_name in localsettings.COMMCARE_NAME.items() %}
    '{{ hostname }}': '{{ commcare_name }}',
{% endfor %}
}
{% endif %}

{#-- Sentry --#}
{% if SENTRY_DSN %}
SENTRY_DSN = '{{ SENTRY_DSN }}'
{% endif %}

{% if SENTRY_API_KEY %}
SENTRY_API_KEY = '{{ SENTRY_API_KEY }}'
{% endif %}

{% if 'SENTRY_ORGANIZATION_SLUG' in localsettings %}
SENTRY_ORGANIZATION_SLUG = '{{ localsettings.SENTRY_ORGANIZATION_SLUG }}'
{% endif %}

{% if 'SENTRY_PROJECT_SLUG' in localsettings %}
SENTRY_PROJECT_SLUG = '{{ localsettings.SENTRY_PROJECT_SLUG }}'
{% endif %}

{% if 'SENTRY_REPOSITORY' in localsettings %}
SENTRY_REPOSITORY = '{{ localsettings.SENTRY_REPOSITORY }}'
{% endif %}
{# -- #}

{# -- Sentry Deprecated -- #}
{% if SENTRY_PUBLIC_KEY %}
SENTRY_PUBLIC_KEY = '{{ SENTRY_PUBLIC_KEY }}'
SENTRY_PRIVATE_KEY = '{{ SENTRY_PRIVATE_KEY }}'
SENTRY_PROJECT_ID = '{{ SENTRY_PROJECT_ID }}'
{% endif %}

{% if SENTRY_QUERY_URL %}
SENTRY_QUERY_URL = '{{ SENTRY_QUERY_URL }}'
{% endif %}
{# -- #}

{% if GREENHOUSE_API_KEY %}
GREENHOUSE_API_KEY = '{{ GREENHOUSE_API_KEY }}'
{% endif %}

LOCAL_LOGGING_CONFIG = json.loads('{{ localsettings.get('LOCAL_LOGGING_CONFIG', {})|to_json }}')
LOCAL_MIDDLEWARE = {{ localsettings.get('LOCAL_MIDDLEWARE', [])|to_json }}

BYPASS_SESSIONS_FOR_MOBILE = {{localsettings.get('BYPASS_SESSIONS_FOR_MOBILE', False)}}


{% if localsettings.get('SUMOLOGIC_URL') %}
SUMOLOGIC_URL = '{{ localsettings.SUMOLOGIC_URL }}'
{% endif %}

{% if localsettings.get('OBFUSCATE_PASSWORD_FOR_NIC_COMPLIANCE') %}
OBFUSCATE_PASSWORD_FOR_NIC_COMPLIANCE = True
{% endif %}

{% if localsettings.get('RESTRICT_USED_PASSWORDS_FOR_NIC_COMPLIANCE') %}
RESTRICT_USED_PASSWORDS_FOR_NIC_COMPLIANCE = True
{% endif %}

{% if localsettings.get('DAYS_TO_KEEP_DEVICE_LOGS') %}
DAYS_TO_KEEP_DEVICE_LOGS = {{ localsettings.DAYS_TO_KEEP_DEVICE_LOGS }}
{% endif %}

{% if localsettings.get('ASYNC_INDICATORS_TO_QUEUE') %}
ASYNC_INDICATORS_TO_QUEUE = {{ localsettings.ASYNC_INDICATORS_TO_QUEUE }}
{% endif %}

{% if localsettings.get('ASYNC_INDICATOR_QUEUE_CRONTAB') %}
ASYNC_INDICATOR_QUEUE_CRONTAB = crontab(**{{ localsettings.get('ASYNC_INDICATOR_QUEUE_CRONTAB') }})
{% endif %}

{% if localsettings.get('ASYNC_INDICATOR_QUEUE_TIMES') %}
ASYNC_INDICATOR_QUEUE_TIMES = {{ localsettings.get('ASYNC_INDICATOR_QUEUE_TIMES') }}
{% endif %}

{% if 'MAX_RULE_UPDATES_IN_ONE_RUN' in localsettings %}
MAX_RULE_UPDATES_IN_ONE_RUN = {{ localsettings.MAX_RULE_UPDATES_IN_ONE_RUN }}
{% endif %}

{% if localsettings.get('REPEATERS_WHITELIST') is not none %}
REPEATERS_WHITELIST = {{ localsettings.REPEATERS_WHITELIST }}
{% endif %}

{% if localsettings.get('ENABLE_NEW_TRIAL_EXPERIENCE') %}
ENABLE_NEW_TRIAL_EXPERIENCE = True
{% endif %}

{% if localsettings.AUDIT_MODEL_SAVE is defined %}
AUDIT_MODEL_SAVE= [
  {% for model in localsettings.get("AUDIT_MODEL_SAVE") -%}
  '{{ model }}',
  {% endfor -%}
]
{% endif %}

{% if localsettings.AUDIT_MODULES is defined %}
AUDIT_MODULES= [
  {% for module in localsettings.get("AUDIT_MODULES") -%}
  '{{ module }}',
  {% endfor -%}
]
{% endif %}

{% if localsettings.AUDIT_VIEWS is defined %}
AUDIT_VIEWS= [
  {% for view in localsettings.get("AUDIT_VIEWS") -%}
  '{{ view }}',
  {% endfor -%}
]
{% endif %}

{% if localsettings.get('STATIC_TOGGLE_STATES') is not none %}
STATIC_TOGGLE_STATES = {{ localsettings.STATIC_TOGGLE_STATES }}
{% endif %}


SERVER_EMAIL = '{{ server_email }}'
DEFAULT_FROM_EMAIL = '{{ default_from_email }}'
RETURN_PATH_EMAIL = '{{ return_path_email }}'
SUPPORT_EMAIL = '{{ support_email }}'
PROBONO_SUPPORT_EMAIL = '{{ probono_support_email }}'
CCHQ_BUG_REPORT_EMAIL = '{{ cchq_bug_report_email }}'
ACCOUNTS_EMAIL = '{{ accounts_email }}'
DATA_EMAIL = '{{ data_email }}'
SUBSCRIPTION_CHANGE_EMAIL = '{{ subscription_change_email }}'
INTERNAL_SUBSCRIPTION_CHANGE_EMAIL = '{{ internal_subscription_change_email }}'
BILLING_EMAIL = '{{ billing_email }}'
INVOICING_CONTACT_EMAIL = '{{ invoicing_contact_email }}'
GROWTH_EMAIL = '{{ growth_email }}'
SAAS_REPORTING_EMAIL = '{{ saas_reporting_email }}'
MASTER_LIST_EMAIL = '{{ master_list_email }}'
SALES_EMAIL = '{{ sales_email }}'
PRIVACY_EMAIL = '{{ privacy_email }}'
EULA_CHANGE_EMAIL = '{{ eula_change_email }}'
CONTACT_EMAIL = '{{ contact_email }}'
FEEDBACK_EMAIL = '{{ feedback_email }}'
SOFT_ASSERT_EMAIL = '{{ soft_assert_email }}'
DAILY_DEPLOY_EMAIL = '{{ daily_deploy_email }}'
{% if TRANSIFEX_API_TOKEN %}
TRANSIFEX_DETAILS = {
    'organization': 'dimagi',
    'project': {
        'icds-cas': ['test-project-211', 'icds-cas-aww', 'icds-cas-ls', 'icds-cas-it', 'icds-cas-miscellaneous',
                     'rtl-test-project'],
    },
    'teams': {
        'icds-cas': {
            'en': 'https://www.transifex.com/dimagi/teams/86537/',
            'ori': 'https://www.transifex.com/dimagi/teams/86537/or/'
        }
    },
    'token': '{{ TRANSIFEX_API_TOKEN }}'
}
{% endif %}

{% if localsettings.UCR_COMPARISONS is defined %}
UCR_COMPARISONS = {
{% for old_config, new_config in localsettings.UCR_COMPARISONS.items() %}
    {% if new_config %}
     '{{ old_config }}': '{{ new_config }}',
    {% else %}
    '{{ old_config }}': None,
    {% endif %}
{% endfor %}
}
{% endif %}

{% if localsettings.KAFKA_API_VERSION is defined %}
KAFKA_API_VERSION = tuple({{ localsettings.KAFKA_API_VERSION }})
{% endif %}

{% if localsettings.ICDS_USE_CITUS is defined %}
ICDS_USE_CITUS = {{ localsettings.ICDS_USE_CITUS }}
{% endif %}

{% if localsettings.STATIC_DATA_SOURCE_PROVIDERS is defined %}
STATIC_DATA_SOURCE_PROVIDERS = [
{% for provider in localsettings.STATIC_DATA_SOURCE_PROVIDERS %}
    '{{ provider }}',
{% endfor %}
]
{% endif %}
