#!/bin/bash
BACKUP_TYPE=$1
MINUTES_TO_RETAIN_BACKUPS=$2
DAYS_TO_RETAIN_BACKUPS=$2
HOSTNAME=$(hostname)
TODAY=$(date +"%Y_%m_%d")
HOUR=$(date +"%Y_%m_%d_%H")
BACKUP_FILE="blobdb_${BACKUP_TYPE}_${TODAY}.tar.gz"
HOURLY_BACKUP_FILE="blobdb_${BACKUP_TYPE}_${HOUR}.tar.gz"
BLOBDB_BACKUP_HOURLY={{ blobdb_backup_hourly }}

{% if not aws_versioning_enabled %}
UPLOAD_NAME="${BACKUP_FILE}"
{% else %}
UPLOAD_NAME="blobdb_${BACKUP_TYPE}_${HOSTNAME}.tar.gz"
{% endif %}


if [ "$BLOBDB_BACKUP_HOURLY" == True ] && [ "$BACKUP_TYPE" == "hourly" ];
then
	
	tar -Pzcf "{{ blobdb_backup_dir }}/${HOURLY_BACKUP_FILE}" "{{ blobdb_dir_path }}"
	# Remove old backups of this backup type of last x mins
	find {{ blobdb_backup_dir }} -mmin "+${MINUTES_TO_RETAIN_BACKUPS}" -name "blobdb_${BACKUP_TYPE}_*" ! -path "*weekly*" ! -path "*daily*" -delete;
else
	
	tar -Pzcf "{{ blobdb_backup_dir }}/${BACKUP_FILE}" "{{ blobdb_dir_path }}"

	# Remove old backups of this backup type
	find {{ blobdb_backup_dir }} -mtime "+${DAYS_TO_RETAIN_BACKUPS}" -name "blobdb_${BACKUP_TYPE}_*" -delete;
fi

{% if blobdb_s3 %}
( cd {{ blobdb_backup_dir }} && {{ virtualenv_home }}/bin/python3 /usr/local/sbin/backup_snapshots.py "${BACKUP_FILE}" "${UPLOAD_NAME}" {{ blobdb_snapshot_bucket }} {{aws_endpoint}} )
{% endif %}
