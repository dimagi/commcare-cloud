# CouchDB
- name: Install prequisites
  apt: name="{{ item }}" state=present
  with_items:
    - build-essential
    - g++
    - erlang-base
    - erlang-dev
    - erlang-eunit
    - erlang-nox
    - libmozjs185-dev
    - libicu-dev
    - libcurl4-gnutls-dev
    - libtool

- name: Check CouchDB existence
  stat: path="{{ couchdb_install_path }}"
  register: couchdb_path

- name: Download CouchDB source
  become: no
  get_url:
    url: "{{ couchdb_source_mirror }}/{{ couchdb_version }}/{{ couchdb_distro_filename }}"
    dest: "~/{{ couchdb_distro_filename }}"
  when: not couchdb_path.stat.exists

# Note 'chdir: ~/' evaluates to /home/<ansible_user> or to /root/ depending on whether `sudo` is set to 'no' or 'yes'
- name: Compile CouchDB
  shell: "{{ item }}"
  args:
    chdir: ~/
  become: no
  with_items:
    - tar xvf ~/{{ couchdb_distro_filename }}
    - cd apache-couchdb-{{ couchdb_version }} && ./configure
    - make -C ~/apache-couchdb-{{ couchdb_version }}
  when: not couchdb_path.stat.exists
  register: couchdb_compile

- stat: path=~/
  become: no
  register: ansible_home_path

- name: Install CouchDB
  shell: "{{ item }}"
  args:
    chdir: "{{ ansible_home_path.stat.path }}"
  become: yes
  with_items:
    - make install -C ./apache-couchdb-{{ couchdb_version }}
    - rm -rf ./apache-couchdb-{{ couchdb_version }}*
  when: not couchdb_path.stat.exists and couchdb_compile|success

- name: Add CouchDB user
  user: name=couchdb createhome=no password=no state=present

- name: Apply CouchDB config
  template: src=local.ini.j2 dest=/usr/local/etc/couchdb/local.ini
  register: update_config

- name: CouchDB ownership permissions
  file: path="{{ item }}" owner=couchdb group=couchdb recurse=yes state=directory
  with_items:
    - "{{ couch_log_dir }}"
    - /usr/local/var/lib/couchdb
    - /usr/local/var/run/couchdb
    - /usr/local/etc/couchdb/
    - '{{ couch_data_dir }}'

- name: Configure CouchDB as service
  file: src=/usr/local/etc/init.d/couchdb dest=/etc/init.d/couchdb state=link

- name: Update rc.d
  shell: update-rc.d couchdb defaults

- name: Start CouchDB service
  service: name=couchdb state=started
  tags: after-reboot

- name: Check CouchDB database
  uri:
    url: "http{% if item.is_https %}s{% endif %}://{{ item.host }}:{{ item.port }}/{{ item.name }}"
    status_code: 200, 404
  register: couch_response
  when: (item.host == inventory_hostname) or is_monolith|bool
  with_items: "{{ couch_dbs.values() }}"

- name: Add CouchDB database
  uri:
    url: "http{% if item.item.is_https %}s{% endif %}://{{ item.item.host }}:{{ item.item.port }}/{{ item.item.name }}"
    method: PUT
    status_code: 201
  when: not item.skipped|default(false) and item.status == 404
  with_items: "{{ couch_response.results }}"

- name: Set CouchDB username and password
  uri:
    url: "http{% if item.is_https %}s{% endif %}://{{ item.host }}:{{ item.port }}/_config/admins/{{ item.username }}"
    method: PUT
    status_code: 200
    body: '"{{ item.password }}"'
    body_format: raw
  when: update_config|changed and ((item.host == inventory_hostname) or is_monolith|bool)
  with_items: "{{ couch_dbs.values() }}"

- name: Copy couch restart script (cleanup)
  become: yes
  file:
    dest: "/usr/local/sbin/couch-restarter.sh"
    state: absent
  tags:
    - cron

- name: Create Cron job (cleanup)
  become: yes
  cron:
    name: "Reboot Couch"
    job: "/usr/local/sbin/couch-restarter.sh > /dev/null"
    user: root
    cron_file: couch-restarter
    state: absent
  tags:
    - cron

- name: Copy couch backup script
  become: yes
  template:
    src: "create_couchdb_backup.sh.j2"
    dest: "/usr/local/sbin/create_couchdb_backup.sh"
    group: couchdb
    owner: couchdb
    mode: 0700
    backup: yes
  when: backup_couch
  tags:
    - cron
    - backups

- name: Create Daily Cron job (cleanup blobdb)
  become: yes
  cron:
    name: "Backup blobdb daily"
    job: "/usr/local/sbin/create_couchdb_backup.sh daily 3"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: "1,2,3,4,5,6"
    user: couchdb
    cron_file: backup_couch
    state: absent
  when: backup_couch
  tags:
    - cron
    - backups

- name: Create Weekly Cron job (cleanup blobdb)
  become: yes
  cron:
    name: "Backup blobdb weekly"
    job: "/usr/local/sbin/create_couchdb_backup.sh weekly 21"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: 0
    user: couchdb
    cron_file: backup_couch
    state: absent
  when: backup_couch
  tags:
    - cron
    - backups

- name: Create Daily Cron job
  become: yes
  cron:
    name: "Backup couchdb daily"
    job: "/usr/local/sbin/create_couchdb_backup.sh daily {{ couchdb_backup_days }}"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: "1,2,3,4,5,6"
    user: couchdb
    cron_file: backup_couch
  when: backup_couch
  tags:
    - cron
    - backups

- name: Create Weekly Cron job
  become: yes
  cron:
    name: "Backup couchdb weekly"
    job: "/usr/local/sbin/create_couchdb_backup.sh weekly {{ couchdb_backup_weeks * 7 }}"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: 0
    user: couchdb
    cron_file: backup_couch
  when: backup_couch
  tags:
    - cron
    - backups

- name: Create aws config directory
  become: yes
  file:
    path: '{{ couchdb_dir }}/.aws'
    owner: couchdb
    group: couchdb
    mode: 0700
    state: directory
  when: couch_s3
  tags:
    - cron
    - backups

- name: copy boto3 credentials file
  become: yes
  template:
    src: "aws_credentials.j2"
    dest: "{{ couchdb_dir }}/.aws/credentials"
    group: couchdb
    owner: couchdb
    mode: 0700
    backup: yes
  when: couch_s3
  tags:
    - cron
    - backups
