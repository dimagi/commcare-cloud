---
# commcare-cloud <env> ansible-playbook letsencrypt_cert.yml
- hosts: proxy
  become: yes
  tasks:
    - name: Add certbot apt repo
      apt_repository: repo='ppa:certbot/certbot' state=present
      register: add_cert_repo

    - name: Update package list
      apt: update_cache=yes
      when: add_cert_repo is changed

    - name: Install Certbot
      apt:
        name:
          - software-properties-common
          - certbot
      ignore_errors: '{{ ansible_check_mode }}'

    - name: Create Challenge Directory
      file:
        path: '/var/www/letsencrypt/.well-known/acme-challenge'
        owner: www-data
        group: www-data
        state: directory
        recurse: yes

    - name: Create a test file
      copy:
        content: ""
        dest: '/var/www/letsencrypt/.well-known/acme-challenge/test.txt'
        owner: www-data
        group: www-data
      ignore_errors: '{{ ansible_check_mode }}'

    - name: Check that a test page returns a status 200
      uri:
        url: 'https://{{SITE_HOST}}/.well-known/acme-challenge/test.txt'
        validate_certs: no

    - name: Run Certbot command when there is a www host
      command: "certbot certonly --webroot -w /var/www/letsencrypt/ -m {{ root_email }} --agree-tos -n -d {{SITE_HOST}} -d {{ NO_WWW_SITE_HOST }}{% if ALTERNATE_HOSTS %} -d {{ ALTERNATE_HOSTS | join(' -d ') }}{% endif %} --expand"
      when: NO_WWW_SITE_HOST|bool

    - name: Run Certbot command when there is no www host
      command: "certbot certonly --webroot -w /var/www/letsencrypt/ -m {{ root_email }} --agree-tos -n -d {{SITE_HOST}}{% if ALTERNATE_HOSTS %} -d {{ ALTERNATE_HOSTS | join(' -d ') }}{% endif %} --expand"
      when: not NO_WWW_SITE_HOST

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    # Certbot auto installs this cron file,
    # but we want to replace it with our own
    - name: Remove default certbot cron
      cron:
        cron_file: certbot
        user: root
        state: absent

    - name: Add custom_certbot cron
      cron:
        name: "Certbot Renew"
        job: "test -x /usr/bin/certbot && perl -e 'sleep int(rand(3600))' && certbot -q renew --post-hook '/etc/init.d/nginx reload'"
        minute: "0"
        hour: "*/12"
        user: root
        cron_file: custom_certbot

    # Cleanup
    - name: Remove "Reload Nginx to reread SSL" cron job
      cron:
        state: absent
        user: root
        cron_file: nginx_ssl_reread
